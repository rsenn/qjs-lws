{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"stra",
				"strategy"
			],
			[
				"un",
				"underlyingSource"
			],
			[
				"asyn",
				"asyncIterable"
			],
			[
				"JS_Is",
				"JS_IsUndefined"
			],
			[
				"asy",
				"asyncIterator"
			],
			[
				"is",
				"isPrototypeOf"
			],
			[
				"Read",
				"ReadableStream"
			],
			[
				"remote",
				"remoteAddress"
			],
			[
				"LWS",
				"LWS_WRITE_HTTP_FINAL"
			],
			[
				"LWS_WRI",
				"LWS_WRITE_HTTP_FINAL"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"GET",
				"GET_VHOST_BY_NAME"
			],
			[
				"JS_C",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"opt",
				"options_or_protocols"
			],
			[
				"op",
				"options_or_protocols"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"LWS_SER",
				"LWS_SERVER_OPTION_ALLOW_NON_SSL_ON_SSL_PORT"
			],
			[
				"LWS_SE",
				"LWS_SERVER_OPTION_CREATE_VHOST_SSL_CTX"
			],
			[
				"LWS_",
				"LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT"
			],
			[
				"getLo",
				"getLogLevelColour"
			],
			[
				"lwsjs_log_",
				"lwsjs_log_colours"
			],
			[
				"JS_Throw",
				"JS_ThrowTypeError"
			],
			[
				"LCCSCF_",
				"LCCSCF_HTTP_MULTIPART_MIME"
			],
			[
				"onCli",
				"onClientHttpWriteable"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"cont",
				"content_type"
			],
			[
				"METHOD_",
				"METHOD_CLIENT_HTTP_MULTIPART"
			],
			[
				"METHOD_HT",
				"METHOD_CLIENT_HTTP_MULTIPART"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"WebSock",
				"WebSocketStream"
			],
			[
				"WebSo",
				"WebSocketStream"
			],
			[
				"WebSocke",
				"WebSocketStream"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"defin",
				"defineProperty(...)"
			],
			[
				"local",
				"local_protocol_name"
			],
			[
				"type",
				"typedListeners"
			],
			[
				"onRe",
				"onReceiveClientHttpRead"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"lws_pr",
				"lws_process_html_args"
			],
			[
				"ioha",
				"iohandler_functions"
			],
			[
				"JS_Sert",
				"JS_SetPropertyUint32"
			],
			[
				"lwsjs",
				"lwsjs_loglevel"
			],
			[
				"lwsjs_clear",
				"lwsjs_clear_all_handlers"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"lws_",
				"lws_context_class_id"
			],
			[
				"callba",
				"callback_names"
			],
			[
				"call",
				"callback_names"
			],
			[
				"FUNCTION_GET_",
				"FUNCTION_GET_CALLBACK_NUMBER"
			],
			[
				"PROP_PE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"PROP_PEE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"lws_callback",
				"lws_callback_names"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					55,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACfPQAAZSA9PgooKSA9PgogIHggPT4KICB2ID0+CiAgaXNEaWN0aW9uYXJ5KHgpCiAgYXNzZXJ0RGljdGlvbmFyeShvYmosIGNvbnRleHQpCiAgYXNzZXJ0RnVuY3Rpb24oeCwgY29udGV4dCkKICBhc3NlcnRPYmplY3QoeCwgY29udGV4dCkKICBhc3NlcnRSZXF1aXJlZEFyZ3VtZW50KHgsIHBvc2l0aW9uLCBjb250ZXh0KQogIGFzc2VydFJlcXVpcmVkRmllbGQoeCwgZmllbGQsIGNvbnRleHQpCiAgY29udmVydFVucmVzdHJpY3RlZERvdWJsZSh2YWx1ZSkKICBjZW5zb3JOZWdhdGl2ZVplcm8oeCkKICBpbnRlZ2VyUGFydCh4KQogIGNvbnZlcnRVbnNpZ25lZExvbmdMb25nV2l0aEVuZm9yY2VSYW5nZSh2YWx1ZSwgY29udGV4dCkKICBuZXdQcm9taXNlKGV4ZWN1dG9yKQogIHByb21pc2VSZXNvbHZlZFdpdGgodmFsdWUpCiAgcmVzb2x2ZSA9PgogIHByb21pc2VSZWplY3RlZFdpdGgocmVhc29uKQpQZXJmb3JtUHJvbWlzZVRoZW4ocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpCiAgdXBvblByb21pc2UocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpCiAgdXBvbkZ1bGZpbGxtZW50KHByb21pc2UsIG9uRnVsZmlsbGVkKQogIHVwb25SZWplY3Rpb24ocHJvbWlzZSwgb25SZWplY3RlZCkKICB0cmFuc2Zvcm1Qcm9taXNlV2l0aChwcm9taXNlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpCiAgc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShwcm9taXNlKQogIF9xdWV1ZU1pY3JvdGFzayA9IGNhbGxiYWNrID0+CiAgX3F1ZXVlTWljcm90YXNrID0gY2IgPT4KICByZWZsZWN0Q2FsbChGLCBWLCBhcmdzKQogIHByb21pc2VDYWxsKEYsIFYsIGFyZ3MpClJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0luaXRpYWxpemUocmVhZGVyLCBzdHJlYW0pClJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0NhbmNlbChyZWFkZXIsIHJlYXNvbikKUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZShyZWFkZXIpCiAgcmVhZGVyTG9ja0V4Y2VwdGlvbihuYW1lKQogIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZShyZWFkZXIpCihyZXNvbHZlLCByZWplY3QpID0+CiAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZChyZWFkZXIsIHJlYXNvbikKICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIHJlYXNvbikKICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUocmVhZGVyKQogIGFzc2VydFJlYWRhYmxlU3RyZWFtKHgsIGNvbnRleHQpCkFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc3RyZWFtKQpSZWFkYWJsZVN0cmVhbUFkZFJlYWRSZXF1ZXN0KHN0cmVhbSwgcmVhZFJlcXVlc3QpClJlYWRhYmxlU3RyZWFtRnVsZmlsbFJlYWRSZXF1ZXN0KHN0cmVhbSwgY2h1bmssIGRvbmUpClJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZFJlcXVlc3RzKHN0cmVhbSkKUmVhZGFibGVTdHJlYW1IYXNEZWZhdWx0UmVhZGVyKHN0cmVhbSkKUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyCiAgY29uc3RydWN0b3Ioc3RyZWFtKQogIGdldCBjbG9zZWQoKQogIGNhbmNlbChyZWFzb24gPSB1bmRlZmluZWQpCiAgcmVhZCgpCihyZXNvbHZlLCByZWplY3QpID0+CiAgX2NodW5rU3RlcHM6IGNodW5rID0+CiAgX2Nsb3NlU3RlcHM6ICgpID0+CiAgX2Vycm9yU3RlcHM6IGUgPT4KICByZWxlYXNlTG9jaygpClJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcgpSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIKUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyClJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcgpJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih4KQpSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJSZWFkKHJlYWRlciwgcmVhZFJlcXVlc3QpClJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlckVycm9yUmVhZFJlcXVlc3RzKHJlYWRlciwgZSkKICByZWFkUmVxdWVzdCA9PgogIGRlZmF1bHRSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpCkNyZWF0ZUFycmF5RnJvbUxpc3QoZWxlbWVudHMpCkNhbkNvcHlEYXRhQmxvY2tCeXRlcyh0b0J1ZmZlciwgdG9JbmRleCwgZnJvbUJ1ZmZlciwgZnJvbUluZGV4LCBjb3VudCkKQ29weURhdGFCbG9ja0J5dGVzKGRlc3QsIGRlc3RPZmZzZXQsIHNyYywgc3JjT2Zmc2V0LCBuKQpUcmFuc2ZlckFycmF5QnVmZmVyID0gTyA9PgpUcmFuc2ZlckFycmF5QnVmZmVyID0gYnVmZmVyID0+ClRyYW5zZmVyQXJyYXlCdWZmZXIgPSBidWZmZXIgPT4KVHJhbnNmZXJBcnJheUJ1ZmZlciA9IGJ1ZmZlciA9PgpDYW5UcmFuc2ZlckFycmF5QnVmZmVyKE8pCklzRGV0YWNoZWRCdWZmZXIgPSBPID0+CklzRGV0YWNoZWRCdWZmZXIgPSBidWZmZXIgPT4KSXNEZXRhY2hlZEJ1ZmZlciA9IGJ1ZmZlciA9PgpBcnJheUJ1ZmZlclNsaWNlKGJ1ZmZlciwgYmVnaW4sIGVuZCkKR2V0TWV0aG9kKHJlY2VpdmVyLCBwcm9wKQpDcmVhdGVBc3luY0Zyb21TeW5jSXRlcmF0b3Ioc3luY0l0ZXJhdG9yUmVjb3JkKQogIG5leHQoKQpBc3luY0Zyb21TeW5jSXRlcmF0b3JDb250aW51YXRpb24ocmVzdWx0KQp2ID0+CkdldEl0ZXJhdG9yKG9iaiwgaGludCA9ICdzeW5jJywgbWV0aG9kKQpJdGVyYXRvck5leHQoaXRlcmF0b3JSZWNvcmQpClJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvckltcGwKICBjb25zdHJ1Y3RvcihyZWFkZXIsIHByZXZlbnRDYW5jZWwpCiAgbmV4dCgpCiAgbmV4dFN0ZXBzID0gKCkgPT4KICByZXR1cm4odmFsdWUpCiAgcmV0dXJuU3RlcHMgPSAoKSA9PgogIF9uZXh0U3RlcHMoKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogIF9jaHVua1N0ZXBzOiBjaHVuayA9PgooKSA9PgogIF9jbG9zZVN0ZXBzOiAoKSA9PgogIF9lcnJvclN0ZXBzOiByZWFzb24gPT4KICBfcmV0dXJuU3RlcHModmFsdWUpCigpID0+CiAgbmV4dCgpCkFjcXVpcmVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3Ioc3RyZWFtLCBwcmV2ZW50Q2FuY2VsKQpJc1JlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcih4KQogIHN0cmVhbUFzeW5jSXRlcmF0b3JCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpCiAgeCA9PgpJc05vbk5lZ2F0aXZlTnVtYmVyKHYpCkNsb25lQXNVaW50OEFycmF5KE8pCkRlcXVldWVWYWx1ZShjb250YWluZXIpCkVucXVldWVWYWx1ZVdpdGhTaXplKGNvbnRhaW5lciwgdmFsdWUsIHNpemUpClBlZWtRdWV1ZVZhbHVlKGNvbnRhaW5lcikKUmVzZXRRdWV1ZShjb250YWluZXIpCiAgdmFsdWUgPT4KICBpc0RhdGFWaWV3KHZpZXcpCkRhdGFWaWV3CiAgYXJyYXlCdWZmZXJWaWV3RWxlbWVudFNpemUoY3RvcikKUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdAogIGNvbnN0cnVjdG9yKCkKICBnZXQgdmlldygpCiAgcmVzcG9uZChieXRlc1dyaXR0ZW4pCiAgcmVzcG9uZFdpdGhOZXdWaWV3KHZpZXcpClJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QKUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdApSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0ClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIKICBjb25zdHJ1Y3RvcigpCiAgZ2V0IGJ5b2JSZXF1ZXN0KCkKICBnZXQgZGVzaXJlZFNpemUoKQogIGNsb3NlKCkKICBlbnF1ZXVlKGNodW5rKQogIGVycm9yKGUgPSB1bmRlZmluZWQpClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIKUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcgpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIKSXNSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHgpCklzUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCh4KQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKQooKSA9PgplID0+ClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhclBlbmRpbmdQdWxsSW50b3MoY29udHJvbGxlcikKUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNvbW1pdFB1bGxJbnRvRGVzY3JpcHRvcihzdHJlYW0sIHB1bGxJbnRvRGVzY3JpcHRvcikKUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNvbW1pdFB1bGxJbnRvRGVzY3JpcHRvcnMoc3RyZWFtLCBwdWxsSW50b0Rlc2NyaXB0b3JzKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29udmVydFB1bGxJbnRvRGVzY3JpcHRvcihwdWxsSW50b0Rlc2NyaXB0b3IpClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlQ2h1bmtUb1F1ZXVlKGNvbnRyb2xsZXIsIGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkKUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDbG9uZWRDaHVua1RvUXVldWUoY29udHJvbGxlciwgYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZURldGFjaGVkUHVsbEludG9Ub1F1ZXVlKGNvbnRyb2xsZXIsIGZpcnN0RGVzY3JpcHRvcikKUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxQdWxsSW50b0Rlc2NyaXB0b3JGcm9tUXVldWUoY29udHJvbGxlciwgcHVsbEludG9EZXNjcmlwdG9yKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbEhlYWRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlciwgc2l6ZSwgcHVsbEludG9EZXNjcmlwdG9yKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySGFuZGxlUXVldWVEcmFpbihjb250cm9sbGVyKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySW52YWxpZGF0ZUJZT0JSZXF1ZXN0KGNvbnRyb2xsZXIpClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJQcm9jZXNzUHVsbEludG9EZXNjcmlwdG9yc1VzaW5nUXVldWUoY29udHJvbGxlcikKUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbnRlcm5hbChjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4pClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJTaGlmdFBlbmRpbmdQdWxsSW50byhjb250cm9sbGVyKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbG9zZShjb250cm9sbGVyKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZShjb250cm9sbGVyLCBjaHVuaykKUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGaWxsUmVhZFJlcXVlc3RGcm9tUXVldWUoY29udHJvbGxlciwgcmVhZFJlcXVlc3QpClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJHZXRCWU9CUmVxdWVzdChjb250cm9sbGVyKQpSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0ClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShjb250cm9sbGVyKQpSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZChjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4pClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kV2l0aE5ld1ZpZXcoY29udHJvbGxlciwgdmlldykKU2V0VXBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgYXV0b0FsbG9jYXRlQ2h1bmtTaXplKQooKSA9PgpyID0+CiAgYnlvYlJlcXVlc3RCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpCiAgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpCiAgY29udmVydFJlYWRhYmxlU3RyZWFtUmVhZGVyTW9kZShtb2RlLCBjb250ZXh0KQpBY3F1aXJlUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHN0cmVhbSkKUmVhZGFibGVTdHJlYW1BZGRSZWFkSW50b1JlcXVlc3Qoc3RyZWFtLCByZWFkSW50b1JlcXVlc3QpClJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZEludG9SZXF1ZXN0cyhzdHJlYW0pClJlYWRhYmxlU3RyZWFtSGFzQllPQlJlYWRlcihzdHJlYW0pClJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcgogIGNvbnN0cnVjdG9yKHN0cmVhbSkKICBnZXQgY2xvc2VkKCkKICBjYW5jZWwocmVhc29uID0gdW5kZWZpbmVkKQogIHJlYWQodmlldywgcmF3T3B0aW9ucyA9IHt9KQoob3B0aW9ucywgY29udGV4dCkgPT4KKHJlc29sdmUsIHJlamVjdCkgPT4KICBfY2h1bmtTdGVwczogY2h1bmsgPT4KICBfY2xvc2VTdGVwczogY2h1bmsgPT4KICBfZXJyb3JTdGVwczogZSA9PgogIHJlbGVhc2VMb2NrKCkKUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyClJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcgpSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIKUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyCklzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHgpClJlYWRhYmxlU3RyZWFtQllPQlJlYWRlclJlYWQocmVhZGVyLCB2aWV3LCBtaW4sIHJlYWRJbnRvUmVxdWVzdCkKUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyRXJyb3JSZWFkSW50b1JlcXVlc3RzKHJlYWRlciwgZSkKICByZWFkSW50b1JlcXVlc3QgPT4KICBieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKQpFeHRyYWN0SGlnaFdhdGVyTWFyayhzdHJhdGVneSwgZGVmYXVsdEhXTSkKRXh0cmFjdFNpemVBbGdvcml0aG0oc3RyYXRlZ3kpCigpID0+CiAgY29udmVydFF1ZXVpbmdTdHJhdGVneShpbml0LCBjb250ZXh0KQogIGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3lTaXplKGZuLCBjb250ZXh0KQpjaHVuayA9PgogIGFzc2VydFdyaXRhYmxlU3RyZWFtKHgsIGNvbnRleHQpCiAgaXNBYm9ydFNpZ25hbCh2YWx1ZSkKQWJvcnRTaWduYWwKV3JpdGFibGVTdHJlYW0KICBjb25zdHJ1Y3RvcihyYXdVbmRlcmx5aW5nU2luayA9IHt9LCByYXdTdHJhdGVneSA9IHt9KQoob3JpZ2luYWwsIGNvbnRleHQpID0+CnJlYXNvbiA9PgooKSA9Pgpjb250cm9sbGVyID0+CihjaHVuaywgY29udHJvbGxlcikgPT4KV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcgooKSA9PgooKSA9PgpjaHVuayA9PgooKSA9PgooKSA9PgooKSA9PgpyZWFzb24gPT4KKCkgPT4KICBnZXQgbG9ja2VkKCkKICBhYm9ydChyZWFzb24gPSB1bmRlZmluZWQpCiAgY2xvc2UoKQogIGdldFdyaXRlcigpCldyaXRhYmxlU3RyZWFtCldyaXRhYmxlU3RyZWFtCldyaXRhYmxlU3RyZWFtCldyaXRhYmxlU3RyZWFtCkFjcXVpcmVXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIoc3RyZWFtKQpJbml0aWFsaXplV3JpdGFibGVTdHJlYW0oc3RyZWFtKQpDcmVhdGVXcml0YWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgd3JpdGVBbGdvcml0aG0sIGNsb3NlQWxnb3JpdGhtLCBhYm9ydEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyayA9IDEsIHNpemVBbGdvcml0aG0gPSAoKSA9PiAxKQpXcml0YWJsZVN0cmVhbQpXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyCklzV3JpdGFibGVTdHJlYW0oeCkKSXNXcml0YWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pCldyaXRhYmxlU3RyZWFtQWJvcnQoc3RyZWFtLCByZWFzb24pCihyZXNvbHZlLCByZWplY3QpID0+CldyaXRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgpXcml0YWJsZVN0cmVhbURlYWxXaXRoUmVqZWN0aW9uKHN0cmVhbSwgZXJyb3IpCldyaXRhYmxlU3RyZWFtU3RhcnRFcnJvcmluZyhzdHJlYW0sIHJlYXNvbikKV3JpdGFibGVTdHJlYW1GaW5pc2hFcnJvcmluZyhzdHJlYW0pCiAgd3JpdGVSZXF1ZXN0ID0+CigpID0+CnJlYXNvbiA9PgpXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pCldyaXRhYmxlU3RyZWFtSGFzT3BlcmF0aW9uTWFya2VkSW5GbGlnaHQoc3RyZWFtKQpXcml0YWJsZVN0cmVhbVJlamVjdENsb3NlQW5kQ2xvc2VkUHJvbWlzZUlmTmVlZGVkKHN0cmVhbSkKV3JpdGFibGVTdHJlYW1VcGRhdGVCYWNrcHJlc3N1cmUoc3RyZWFtLCBiYWNrcHJlc3N1cmUpCldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcgogIGNvbnN0cnVjdG9yKHN0cmVhbSkKICBnZXQgY2xvc2VkKCkKICBnZXQgZGVzaXJlZFNpemUoKQogIGdldCByZWFkeSgpCiAgYWJvcnQocmVhc29uID0gdW5kZWZpbmVkKQogIGNsb3NlKCkKICByZWxlYXNlTG9jaygpCiAgd3JpdGUoY2h1bmsgPSB1bmRlZmluZWQpCldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcgpXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIKV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyCldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcgpXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIKSXNXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIoeCkKV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQ2xvc2Uod3JpdGVyKQpXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJFbnN1cmVSZWFkeVByb21pc2VSZWplY3RlZCh3cml0ZXIsIGVycm9yKQpXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJSZWxlYXNlKHdyaXRlcikKV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyV3JpdGUod3JpdGVyLCBjaHVuaykKKHJlc29sdmUsIHJlamVjdCkgPT4KV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcgogIGNvbnN0cnVjdG9yKCkKICBnZXQgYWJvcnRSZWFzb24oKQogIGdldCBzaWduYWwoKQogIGVycm9yKGUgPSB1bmRlZmluZWQpCldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKSXNXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHgpClNldFVwV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKQooKSA9PgpyID0+CldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikKV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKGNvbnRyb2xsZXIpCldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShjb250cm9sbGVyKQpXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQWR2YW5jZVF1ZXVlSWZOZWVkZWQoY29udHJvbGxlcikKKCkgPT4KcmVhc29uID0+CigpID0+CnJlYXNvbiA9PgpXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3JJZk5lZWRlZChjb250cm9sbGVyLCBlcnJvcikKV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldEJhY2twcmVzc3VyZShjb250cm9sbGVyKQpXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZXJyb3IpCiAgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKQogIGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKQogIGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpCiAgZGVmYXVsdFdyaXRlckxvY2tFeGNlcHRpb24obmFtZSkKICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUod3JpdGVyKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pCiAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZWplY3Qod3JpdGVyLCByZWFzb24pCiAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZXNvbHZlKHdyaXRlcikKICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpCihyZXNvbHZlLCByZWplY3QpID0+CiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHdyaXRlciwgcmVhc29uKQogIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZXNvbHZlZCh3cml0ZXIpCiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbikKICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVzb2x2ZSh3cml0ZXIpCiAgZ2V0R2xvYmFscygpCiAgaXNET01FeGNlcHRpb25Db25zdHJ1Y3RvcihjdG9yKQogIGdldEZyb21HbG9iYWwoKQogIGNyZWF0ZVBvbHlmaWxsKCkKICBjdG9yID0gZnVuY3Rpb24gRE9NRXhjZXB0aW9uMihtZXNzYWdlLCBuYW1lKQogIGN0b3IKICBjdG9yClJlYWRhYmxlU3RyZWFtUGlwZVRvKHNvdXJjZSwgZGVzdCwgcHJldmVudENsb3NlLCBwcmV2ZW50QWJvcnQsIHByZXZlbnRDYW5jZWwsIHNpZ25hbCkKKHJlc29sdmUsIHJlamVjdCkgPT4KICBhYm9ydEFsZ29yaXRobSA9ICgpID0+CigpID0+CigpID0+CigpID0+CiAgYWN0aW9uID0+CiAgcGlwZUxvb3AoKQoocmVzb2x2ZUxvb3AsIHJlamVjdExvb3ApID0+CiAgbmV4dChkb25lKQogIHBpcGVTdGVwKCkKKCkgPT4KKHJlc29sdmVSZWFkLCByZWplY3RSZWFkKSA9PgogIF9jaHVua1N0ZXBzOiBjaHVuayA9PgogIF9jbG9zZVN0ZXBzOiAoKSA9PgpzdG9yZWRFcnJvciA9PgooKSA9PgpzdG9yZWRFcnJvciA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgogIHdhaXRGb3JXcml0ZXNUb0ZpbmlzaCgpCigpID0+CiAgaXNPckJlY29tZXNFcnJvcmVkKHN0cmVhbSwgcHJvbWlzZSwgYWN0aW9uKQogIGlzT3JCZWNvbWVzQ2xvc2VkKHN0cmVhbSwgcHJvbWlzZSwgYWN0aW9uKQogIHNodXRkb3duV2l0aEFjdGlvbihhY3Rpb24sIG9yaWdpbmFsSXNFcnJvciwgb3JpZ2luYWxFcnJvcikKICBkb1RoZVJlc3QoKQooKSA9PgpuZXdFcnJvciA9PgogIHNodXRkb3duKGlzRXJyb3IsIGVycm9yKQooKSA9PgogIGZpbmFsaXplKGlzRXJyb3IsIGVycm9yKQpSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyCiAgY29uc3RydWN0b3IoKQogIGdldCBkZXNpcmVkU2l6ZSgpCiAgY2xvc2UoKQogIGVucXVldWUoY2h1bmsgPSB1bmRlZmluZWQpCiAgZXJyb3IoZSA9IHVuZGVmaW5lZCkKUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcgpSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyClJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcgpJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoeCkKUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcikKKCkgPT4KZSA9PgpSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyU2hvdWxkQ2FsbFB1bGwoY29udHJvbGxlcikKUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKQpSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UoY29udHJvbGxlcikKUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoY29udHJvbGxlciwgY2h1bmspClJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBlKQpSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUoY29udHJvbGxlcikKUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckhhc0JhY2twcmVzc3VyZShjb250cm9sbGVyKQpSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUoY29udHJvbGxlcikKU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSkKKCkgPT4KciA9PgogIGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbjIobmFtZSkKUmVhZGFibGVTdHJlYW1EZWZhdWx0VGVlKHN0cmVhbSwgY2xvbmVGb3JCcmFuY2gyKQogIHJlc29sdmUgPT4KICBwdWxsQWxnb3JpdGhtKCkKICBfY2h1bmtTdGVwczogY2h1bmsgPT4KKCkgPT4KICBfY2xvc2VTdGVwczogKCkgPT4KICBfZXJyb3JTdGVwczogKCkgPT4KICBjYW5jZWwxQWxnb3JpdGhtKHJlYXNvbikKICBjYW5jZWwyQWxnb3JpdGhtKHJlYXNvbikKICBzdGFydEFsZ29yaXRobSgpCnIgPT4KUmVhZGFibGVCeXRlU3RyZWFtVGVlKHN0cmVhbSkKICByZXNvbHZlID0+CiAgZm9yd2FyZFJlYWRlckVycm9yKHRoaXNSZWFkZXIpCnIgPT4KICBwdWxsV2l0aERlZmF1bHRSZWFkZXIoKQogIF9jaHVua1N0ZXBzOiBjaHVuayA9PgooKSA9PgogIF9jbG9zZVN0ZXBzOiAoKSA9PgogIF9lcnJvclN0ZXBzOiAoKSA9PgogIHB1bGxXaXRoQllPQlJlYWRlcih2aWV3LCBmb3JCcmFuY2gyKQogIF9jaHVua1N0ZXBzOiBjaHVuayA9PgooKSA9PgogIF9jbG9zZVN0ZXBzOiBjaHVuayA9PgogIF9lcnJvclN0ZXBzOiAoKSA9PgogIHB1bGwxQWxnb3JpdGhtKCkKICBwdWxsMkFsZ29yaXRobSgpCiAgY2FuY2VsMUFsZ29yaXRobShyZWFzb24pCiAgY2FuY2VsMkFsZ29yaXRobShyZWFzb24pCiAgc3RhcnRBbGdvcml0aG0oKQogIGNvbnZlcnRSZWFkYWJsZVN0cmVhbVR5cGUodHlwZSwgY29udGV4dCkKICBjb252ZXJ0UGlwZU9wdGlvbnMob3B0aW9ucywgY29udGV4dCkKICBhc3NlcnRBYm9ydFNpZ25hbChzaWduYWwsIGNvbnRleHQpClJlYWRhYmxlU3RyZWFtCiAgY29uc3RydWN0b3IocmF3VW5kZXJseWluZ1NvdXJjZSA9IHt9LCByYXdTdHJhdGVneSA9IHt9KQooc291cmNlLCBjb250ZXh0KSA9PgpyZWFzb24gPT4KY29udHJvbGxlciA9Pgpjb250cm9sbGVyID0+ClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIKKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KcmVhc29uID0+CigpID0+ClJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KcmVhc29uID0+CigpID0+CiAgZ2V0IGxvY2tlZCgpCiAgY2FuY2VsKHJlYXNvbiA9IHVuZGVmaW5lZCkKICBnZXRSZWFkZXIocmF3T3B0aW9ucyA9IHVuZGVmaW5lZCkKKG9wdGlvbnMsIGNvbnRleHQpID0+CiAgcGlwZVRocm91Z2gocmF3VHJhbnNmb3JtLCByYXdPcHRpb25zID0ge30pCihwYWlyLCBjb250ZXh0KSA9PgogIHBpcGVUbyhkZXN0aW5hdGlvbiwgcmF3T3B0aW9ucyA9IHt9KQogIHRlZSgpCiAgdmFsdWVzKHJhd09wdGlvbnMgPSB1bmRlZmluZWQpCihvcHRpb25zLCBjb250ZXh0KSA9PgogIHN0YXRpYyBmcm9tKGFzeW5jSXRlcmFibGUpCiAgcHVsbEFsZ29yaXRobSgpCnJlYWRSZXN1bHQgPT4KICBjYW5jZWxBbGdvcml0aG0ocmVhc29uKQogIHB1bGxBbGdvcml0aG0oKQppdGVyUmVzdWx0ID0+CiAgY2FuY2VsQWxnb3JpdGhtKHJlYXNvbikKaXRlclJlc3VsdCA9PgpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpSZWFkYWJsZVN0cmVhbQpDcmVhdGVSZWFkYWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrID0gMSwgc2l6ZUFsZ29yaXRobSA9ICgpID0+IDEpClJlYWRhYmxlU3RyZWFtClJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKQ3JlYXRlUmVhZGFibGVCeXRlU3RyZWFtKHN0YXJ0QWxnb3JpdGhtLCBwdWxsQWxnb3JpdGhtLCBjYW5jZWxBbGdvcml0aG0pClJlYWRhYmxlU3RyZWFtClJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIKSW5pdGlhbGl6ZVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkKSXNSZWFkYWJsZVN0cmVhbSh4KQpJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHN0cmVhbSkKUmVhZGFibGVTdHJlYW1DYW5jZWwoc3RyZWFtLCByZWFzb24pCiAgcmVhZEludG9SZXF1ZXN0ID0+ClJlYWRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKQogIHJlYWRSZXF1ZXN0ID0+ClJlYWRhYmxlU3RyZWFtRXJyb3Ioc3RyZWFtLCBlKQogIHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24yKG5hbWUpCiAgY29udmVydFF1ZXVpbmdTdHJhdGVneUluaXQoaW5pdCwgY29udGV4dCkKICBieXRlTGVuZ3RoU2l6ZUZ1bmN0aW9uID0gY2h1bmsgPT4KQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneQogIGNvbnN0cnVjdG9yKG9wdGlvbnMpCiAgZ2V0IGhpZ2hXYXRlck1hcmsoKQogIGdldCBzaXplKCkKQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneQogIGJ5dGVMZW5ndGhCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpCklzQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneSh4KQogIGNvdW50U2l6ZUZ1bmN0aW9uID0gKCkgPT4KQ291bnRRdWV1aW5nU3RyYXRlZ3kKICBjb25zdHJ1Y3RvcihvcHRpb25zKQogIGdldCBoaWdoV2F0ZXJNYXJrKCkKICBnZXQgc2l6ZSgpCkNvdW50UXVldWluZ1N0cmF0ZWd5CiAgY291bnRCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpCklzQ291bnRRdWV1aW5nU3RyYXRlZ3koeCkKVHJhbnNmb3JtU3RyZWFtCiAgY29uc3RydWN0b3IocmF3VHJhbnNmb3JtZXIgPSB7fSwgcmF3V3JpdGFibGVTdHJhdGVneSA9IHt9LCByYXdSZWFkYWJsZVN0cmF0ZWd5ID0ge30pCihvcmlnaW5hbCwgY29udGV4dCkgPT4KcmVhc29uID0+CmNvbnRyb2xsZXIgPT4KY29udHJvbGxlciA9PgooY2h1bmssIGNvbnRyb2xsZXIpID0+CiAgcmVzb2x2ZSA9PgogIHN0YXJ0QWxnb3JpdGhtKCkKICB3cml0ZUFsZ29yaXRobShjaHVuaykKKCkgPT4KICBhYm9ydEFsZ29yaXRobShyZWFzb24pCihyZXNvbHZlLCByZWplY3QpID0+CigpID0+CnIgPT4KICBjbG9zZUFsZ29yaXRobSgpCihyZXNvbHZlLCByZWplY3QpID0+CigpID0+CnIgPT4KICBwdWxsQWxnb3JpdGhtKCkKICBjYW5jZWxBbGdvcml0aG0ocmVhc29uKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgooKSA9PgpyID0+ClRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyCmNodW5rID0+CmNodW5rID0+CigpID0+CigpID0+CnJlYXNvbiA9PgooKSA9PgogIGdldCByZWFkYWJsZSgpCiAgZ2V0IHdyaXRhYmxlKCkKVHJhbnNmb3JtU3RyZWFtCklzVHJhbnNmb3JtU3RyZWFtKHgpClRyYW5zZm9ybVN0cmVhbUVycm9yKHN0cmVhbSwgZSkKVHJhbnNmb3JtU3RyZWFtRXJyb3JXcml0YWJsZUFuZFVuYmxvY2tXcml0ZShzdHJlYW0sIGUpClRyYW5zZm9ybVN0cmVhbVVuYmxvY2tXcml0ZShzdHJlYW0pClRyYW5zZm9ybVN0cmVhbVNldEJhY2twcmVzc3VyZShzdHJlYW0sIGJhY2twcmVzc3VyZSkKICByZXNvbHZlID0+ClRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyCiAgY29uc3RydWN0b3IoKQogIGdldCBkZXNpcmVkU2l6ZSgpCiAgZW5xdWV1ZShjaHVuayA9IHVuZGVmaW5lZCkKICBlcnJvcihyZWFzb24gPSB1bmRlZmluZWQpCiAgdGVybWluYXRlKCkKVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIKSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcih4KQpUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKQpUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoY29udHJvbGxlciwgY2h1bmspClRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyUGVyZm9ybVRyYW5zZm9ybShjb250cm9sbGVyLCBjaHVuaykKciA9PgogIGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbjMobmFtZSkKICBkZWZhdWx0Q29udHJvbGxlckZpbmlzaFByb21pc2VSZXNvbHZlKGNvbnRyb2xsZXIpCiAgZGVmYXVsdENvbnRyb2xsZXJGaW5pc2hQcm9taXNlUmVqZWN0KGNvbnRyb2xsZXIsIHJlYXNvbikKICBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uMyhuYW1lKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					56,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/streams.js",
						"symkeys":
						[
							[
								359,
								363
							],
							[
								430,
								435
							],
							[
								571,
								575
							],
							[
								674,
								678
							],
							[
								752,
								776
							],
							[
								839,
								878
							],
							[
								983,
								1018
							],
							[
								1107,
								1140
							],
							[
								1222,
								1275
							],
							[
								1378,
								1425
							],
							[
								1515,
								1556
							],
							[
								1586,
								1616
							],
							[
								1648,
								1671
							],
							[
								1720,
								1784
							],
							[
								2526,
								2555
							],
							[
								2601,
								2636
							],
							[
								2659,
								2669
							],
							[
								2690,
								2726
							],
							[
								2772,
								2833
							],
							[
								2908,
								2962
							],
							[
								3087,
								3133
							],
							[
								3176,
								3219
							],
							[
								3272,
								3348
							],
							[
								3430,
								3473
							],
							[
								3557,
								3586
							],
							[
								3746,
								3769
							],
							[
								3856,
								3888
							],
							[
								4026,
								4058
							],
							[
								4623,
								4685
							],
							[
								5142,
								5200
							],
							[
								5331,
								5382
							],
							[
								6096,
								6130
							],
							[
								6216,
								6269
							],
							[
								6322,
								6342
							],
							[
								6478,
								6549
							],
							[
								6655,
								6712
							],
							[
								6956,
								7006
							],
							[
								7244,
								7285
							],
							[
								7423,
								7474
							],
							[
								7530,
								7588
							],
							[
								7740,
								7802
							],
							[
								8013,
								8062
							],
							[
								8114,
								8161
							],
							[
								8328,
								8355
							],
							[
								8360,
								8379
							],
							[
								8966,
								8978
							],
							[
								9254,
								9280
							],
							[
								9810,
								9816
							],
							[
								10122,
								10142
							],
							[
								10247,
								10268
							],
							[
								10322,
								10340
							],
							[
								10397,
								10414
							],
							[
								11144,
								11157
							],
							[
								11701,
								11728
							],
							[
								11774,
								11801
							],
							[
								11843,
								11870
							],
							[
								11918,
								11945
							],
							[
								12016,
								12057
							],
							[
								12229,
								12290
							],
							[
								12677,
								12741
							],
							[
								12856,
								12870
							],
							[
								12903,
								12950
							],
							[
								13117,
								13155
							],
							[
								13188,
								13267
							],
							[
								13459,
								13523
							],
							[
								13610,
								13636
							],
							[
								13677,
								13708
							],
							[
								13776,
								13807
							],
							[
								13864,
								13895
							],
							[
								13941,
								13975
							],
							[
								14018,
								14041
							],
							[
								14081,
								14109
							],
							[
								14134,
								14162
							],
							[
								14222,
								14267
							],
							[
								14467,
								14501
							],
							[
								14703,
								14759
							],
							[
								14866,
								14872
							],
							[
								15888,
								15938
							],
							[
								16103,
								16107
							],
							[
								16188,
								16236
							],
							[
								17012,
								17049
							],
							[
								17317,
								17348
							],
							[
								17353,
								17387
							],
							[
								17515,
								17521
							],
							[
								17534,
								17551
							],
							[
								17741,
								17754
							],
							[
								17767,
								17786
							],
							[
								17989,
								18001
							],
							[
								18253,
								18273
							],
							[
								18378,
								18399
							],
							[
								18468,
								18473
							],
							[
								18537,
								18555
							],
							[
								18758,
								18780
							],
							[
								19042,
								19061
							],
							[
								19494,
								19499
							],
							[
								19691,
								19697
							],
							[
								20371,
								20437
							],
							[
								20708,
								20749
							],
							[
								20996,
								21049
							],
							[
								21232,
								21236
							],
							[
								21289,
								21320
							],
							[
								21443,
								21472
							],
							[
								21643,
								21675
							],
							[
								21958,
								22011
							],
							[
								22295,
								22329
							],
							[
								22502,
								22532
							],
							[
								22755,
								22763
							],
							[
								22882,
								22907
							],
							[
								22929,
								22937
							],
							[
								23011,
								23052
							],
							[
								23201,
								23226
							],
							[
								23231,
								23244
							],
							[
								23416,
								23426
							],
							[
								23548,
								23569
							],
							[
								24284,
								24308
							],
							[
								25152,
								25177
							],
							[
								25225,
								25250
							],
							[
								25312,
								25337
							],
							[
								25419,
								25447
							],
							[
								25452,
								25465
							],
							[
								25609,
								25626
							],
							[
								26052,
								26069
							],
							[
								26450,
								26457
							],
							[
								26920,
								26934
							],
							[
								27850,
								27870
							],
							[
								29972,
								30000
							],
							[
								30044,
								30072
							],
							[
								30120,
								30148
							],
							[
								30184,
								30212
							],
							[
								30284,
								30326
							],
							[
								30515,
								30554
							],
							[
								30750,
								30815
							],
							[
								31631,
								31636
							],
							[
								31851,
								31855
							],
							[
								31948,
								32018
							],
							[
								32141,
								32230
							],
							[
								33014,
								33105
							],
							[
								33251,
								33333
							],
							[
								33680,
								33780
							],
							[
								33892,
								33998
							],
							[
								34305,
								34401
							],
							[
								34705,
								34805
							],
							[
								36633,
								36734
							],
							[
								36941,
								37006
							],
							[
								37361,
								37431
							],
							[
								37637,
								37722
							],
							[
								38272,
								38350
							],
							[
								40825,
								40894
							],
							[
								41024,
								41088
							],
							[
								41178,
								41232
							],
							[
								41928,
								41991
							],
							[
								44612,
								44669
							],
							[
								44960,
								45046
							],
							[
								45361,
								45424
							],
							[
								45787,
								45812
							],
							[
								46187,
								46250
							],
							[
								46456,
								46526
							],
							[
								47309,
								47382
							],
							[
								48623,
								48771
							],
							[
								49688,
								49693
							],
							[
								49898,
								49902
							],
							[
								49995,
								50040
							],
							[
								50165,
								50219
							],
							[
								50391,
								50446
							],
							[
								50657,
								50705
							],
							[
								50758,
								50824
							],
							[
								51010,
								51063
							],
							[
								51119,
								51163
							],
							[
								51327,
								51351
							],
							[
								51356,
								51375
							],
							[
								52153,
								52165
							],
							[
								52435,
								52461
							],
							[
								52749,
								52776
							],
							[
								53400,
								53421
							],
							[
								54409,
								54429
							],
							[
								54538,
								54559
							],
							[
								54613,
								54634
							],
							[
								54687,
								54704
							],
							[
								55443,
								55456
							],
							[
								55993,
								56017
							],
							[
								56063,
								56087
							],
							[
								56129,
								56153
							],
							[
								56201,
								56225
							],
							[
								56293,
								56331
							],
							[
								56504,
								56577
							],
							[
								58902,
								58967
							],
							[
								59098,
								59116
							],
							[
								59153,
								59197
							],
							[
								59364,
								59415
							],
							[
								59637,
								59676
							],
							[
								59727,
								59732
							],
							[
								59796,
								59842
							],
							[
								60240,
								60288
							],
							[
								60331,
								60339
							],
							[
								60422,
								60463
							],
							[
								60583,
								60612
							],
							[
								60697,
								60708
							],
							[
								60878,
								60892
							],
							[
								60897,
								60950
							],
							[
								61186,
								61208
							],
							[
								61713,
								61722
							],
							[
								61875,
								61880
							],
							[
								62027,
								62040
							],
							[
								62197,
								62219
							],
							[
								62650,
								62681
							],
							[
								62758,
								62763
							],
							[
								62799,
								62804
							],
							[
								62880,
								62888
							],
							[
								62931,
								62936
							],
							[
								63033,
								63038
							],
							[
								63064,
								63069
							],
							[
								63166,
								63175
							],
							[
								63207,
								63212
							],
							[
								63489,
								63501
							],
							[
								64201,
								64226
							],
							[
								65084,
								65091
							],
							[
								66053,
								66064
							],
							[
								66411,
								66425
							],
							[
								66469,
								66483
							],
							[
								66527,
								66541
							],
							[
								66585,
								66599
							],
							[
								66657,
								66708
							],
							[
								66764,
								66805
							],
							[
								67163,
								67300
							],
							[
								67380,
								67394
							],
							[
								67478,
								67509
							],
							[
								67696,
								67724
							],
							[
								67895,
								67934
							],
							[
								68040,
								68084
							],
							[
								68772,
								68792
							],
							[
								69131,
								69167
							],
							[
								69513,
								69533
							],
							[
								70002,
								70057
							],
							[
								70258,
								70310
							],
							[
								70801,
								70846
							],
							[
								71103,
								71118
							],
							[
								71703,
								71708
							],
							[
								71837,
								71846
							],
							[
								71984,
								72036
							],
							[
								72158,
								72215
							],
							[
								72345,
								72411
							],
							[
								72775,
								72838
							],
							[
								73384,
								73411
							],
							[
								73416,
								73435
							],
							[
								74903,
								74915
							],
							[
								75567,
								75584
							],
							[
								76552,
								76563
							],
							[
								76835,
								76860
							],
							[
								77337,
								77344
							],
							[
								78525,
								78538
							],
							[
								78819,
								78843
							],
							[
								79463,
								79490
							],
							[
								79534,
								79561
							],
							[
								79605,
								79632
							],
							[
								79688,
								79715
							],
							[
								79751,
								79778
							],
							[
								79849,
								79890
							],
							[
								80069,
								80118
							],
							[
								80240,
								80317
							],
							[
								80614,
								80665
							],
							[
								81421,
								81477
							],
							[
								82634,
								82654
							],
							[
								83318,
								83349
							],
							[
								83354,
								83367
							],
							[
								83742,
								83759
							],
							[
								84032,
								84044
							],
							[
								84761,
								84781
							],
							[
								85462,
								85493
							],
							[
								85568,
								85613
							],
							[
								85801,
								85960
							],
							[
								86905,
								86910
							],
							[
								87122,
								87126
							],
							[
								87321,
								87388
							],
							[
								87569,
								87626
							],
							[
								87753,
								87819
							],
							[
								87888,
								87960
							],
							[
								88844,
								88849
							],
							[
								89676,
								89685
							],
							[
								90488,
								90493
							],
							[
								91154,
								91163
							],
							[
								91607,
								91679
							],
							[
								91806,
								91873
							],
							[
								91987,
								92051
							],
							[
								92259,
								92299
							],
							[
								92402,
								92453
							],
							[
								92590,
								92637
							],
							[
								92766,
								92807
							],
							[
								92893,
								92946
							],
							[
								92999,
								93019
							],
							[
								93213,
								93284
							],
							[
								93390,
								93447
							],
							[
								93785,
								93835
							],
							[
								94126,
								94178
							],
							[
								94230,
								94250
							],
							[
								94378,
								94448
							],
							[
								94552,
								94614
							],
							[
								94711,
								94767
							],
							[
								95048,
								95097
							],
							[
								95351,
								95372
							],
							[
								95622,
								95662
							],
							[
								95870,
								95894
							],
							[
								96043,
								96068
							],
							[
								96079,
								96123
							],
							[
								96322,
								96326
							],
							[
								96395,
								96399
							],
							[
								96592,
								96686
							],
							[
								97282,
								97302
							],
							[
								97366,
								97388
							],
							[
								97581,
								97586
							],
							[
								97799,
								97804
							],
							[
								97997,
								98002
							],
							[
								98027,
								98036
							],
							[
								98215,
								98234
							],
							[
								98261,
								98289
							],
							[
								98300,
								98319
							],
							[
								98472,
								98491
							],
							[
								98605,
								98610
							],
							[
								98639,
								98667
							],
							[
								98734,
								98755
							],
							[
								98934,
								98952
							],
							[
								99105,
								99119
							],
							[
								99165,
								99170
							],
							[
								99350,
								99364
							],
							[
								99411,
								99416
							],
							[
								99600,
								99605
							],
							[
								99659,
								99664
							],
							[
								100425,
								100430
							],
							[
								100584,
								100616
							],
							[
								100709,
								100714
							],
							[
								100800,
								100852
							],
							[
								100974,
								101025
							],
							[
								101129,
								101196
							],
							[
								101422,
								101442
							],
							[
								101496,
								101501
							],
							[
								101554,
								101565
							],
							[
								101642,
								101675
							],
							[
								101859,
								101864
							],
							[
								101939,
								101972
							],
							[
								102319,
								102350
							],
							[
								102355,
								102368
							],
							[
								102668,
								102685
							],
							[
								103070,
								103077
							],
							[
								103374,
								103400
							],
							[
								103843,
								103863
							],
							[
								105092,
								105123
							],
							[
								105167,
								105198
							],
							[
								105246,
								105277
							],
							[
								105313,
								105344
							],
							[
								105419,
								105464
							],
							[
								105652,
								105720
							],
							[
								106059,
								106064
							],
							[
								106282,
								106286
							],
							[
								106382,
								106448
							],
							[
								106869,
								106936
							],
							[
								107075,
								107132
							],
							[
								107446,
								107512
							],
							[
								108274,
								108334
							],
							[
								108559,
								108625
							],
							[
								108827,
								108894
							],
							[
								108969,
								109038
							],
							[
								109191,
								109334
							],
							[
								110026,
								110031
							],
							[
								110239,
								110243
							],
							[
								110339,
								110391
							],
							[
								110563,
								110621
							],
							[
								110989,
								110999
							],
							[
								111037,
								111061
							],
							[
								111209,
								111230
							],
							[
								111257,
								111262
							],
							[
								111669,
								111687
							],
							[
								111992,
								112010
							],
							[
								112145,
								112178
							],
							[
								112471,
								112504
							],
							[
								112797,
								112822
							],
							[
								113031,
								113035
							],
							[
								113319,
								113357
							],
							[
								113797,
								113807
							],
							[
								113845,
								113884
							],
							[
								113932,
								113936
							],
							[
								114244,
								114276
							],
							[
								114558,
								114579
							],
							[
								114606,
								114611
							],
							[
								115571,
								115589
							],
							[
								116188,
								116206
							],
							[
								116298,
								116343
							],
							[
								116736,
								116757
							],
							[
								116784,
								116789
							],
							[
								118009,
								118030
							],
							[
								118866,
								118884
							],
							[
								118986,
								119011
							],
							[
								119399,
								119424
							],
							[
								119811,
								119844
							],
							[
								120137,
								120170
							],
							[
								120463,
								120488
							],
							[
								120790,
								120839
							],
							[
								121041,
								121086
							],
							[
								121666,
								121709
							],
							[
								121845,
								121859
							],
							[
								121864,
								121919
							],
							[
								122163,
								122183
							],
							[
								122952,
								122961
							],
							[
								123111,
								123124
							],
							[
								123280,
								123293
							],
							[
								123819,
								123847
							],
							[
								123928,
								123933
							],
							[
								123971,
								123976
							],
							[
								124054,
								124059
							],
							[
								124096,
								124101
							],
							[
								124204,
								124213
							],
							[
								124248,
								124253
							],
							[
								124841,
								124872
							],
							[
								124953,
								124958
							],
							[
								124996,
								125001
							],
							[
								125079,
								125084
							],
							[
								125121,
								125126
							],
							[
								125229,
								125238
							],
							[
								125273,
								125278
							],
							[
								125577,
								125589
							],
							[
								125982,
								126008
							],
							[
								126295,
								126328
							],
							[
								126431,
								126452
							],
							[
								126923,
								126965
							],
							[
								127132,
								127150
							],
							[
								128299,
								128335
							],
							[
								129900,
								129905
							],
							[
								130245,
								130275
							],
							[
								130375,
								130396
							],
							[
								131234,
								131260
							],
							[
								131458,
								131482
							],
							[
								131684,
								131697
							],
							[
								132152,
								132184
							],
							[
								132577,
								132601
							],
							[
								132861,
								132874
							],
							[
								133338,
								133370
							],
							[
								133777,
								133790
							],
							[
								134524,
								134538
							],
							[
								134584,
								134598
							],
							[
								134650,
								134664
							],
							[
								134720,
								134734
							],
							[
								134780,
								134794
							],
							[
								134834,
								134848
							],
							[
								134886,
								134900
							],
							[
								134980,
								134994
							],
							[
								135039,
								135053
							],
							[
								135117,
								135238
							],
							[
								135318,
								135332
							],
							[
								135416,
								135447
							],
							[
								135618,
								135699
							],
							[
								135733,
								135747
							],
							[
								135831,
								135859
							],
							[
								136011,
								136052
							],
							[
								136164,
								136192
							],
							[
								136363,
								136402
							],
							[
								136508,
								136553
							],
							[
								137002,
								137020
							],
							[
								137213,
								137249
							],
							[
								137596,
								137610
							],
							[
								137646,
								137685
							],
							[
								138169,
								138210
							],
							[
								138360,
								138410
							],
							[
								138726,
								138759
							],
							[
								138855,
								138880
							],
							[
								138885,
								138905
							],
							[
								139214,
								139233
							],
							[
								139496,
								139506
							],
							[
								139787,
								139812
							],
							[
								139881,
								139925
							],
							[
								140050,
								140089
							],
							[
								140328,
								140353
							],
							[
								140415,
								140435
							],
							[
								140440,
								140460
							],
							[
								140759,
								140778
							],
							[
								141089,
								141099
							],
							[
								141360,
								141380
							],
							[
								141444,
								141483
							],
							[
								141598,
								141632
							],
							[
								141862,
								141877
							],
							[
								141882,
								141966
							],
							[
								142241,
								142263
							],
							[
								142879,
								142888
							],
							[
								143042,
								143055
							],
							[
								143234,
								143247
							],
							[
								143430,
								143452
							],
							[
								144157,
								144167
							],
							[
								144244,
								144269
							],
							[
								144316,
								144346
							],
							[
								144704,
								144709
							],
							[
								145119,
								145150
							],
							[
								145391,
								145411
							],
							[
								145726,
								145731
							],
							[
								146112,
								146116
							],
							[
								146379,
								146404
							],
							[
								146645,
								146665
							],
							[
								146971,
								146976
							],
							[
								147349,
								147353
							],
							[
								147772,
								147796
							],
							[
								148022,
								148054
							],
							[
								148295,
								148315
							],
							[
								148630,
								148635
							],
							[
								149075,
								149079
							],
							[
								149851,
								149883
							],
							[
								149980,
								149988
							],
							[
								150040,
								150048
							],
							[
								150385,
								150390
							],
							[
								150423,
								150428
							],
							[
								150524,
								150533
							],
							[
								150563,
								150568
							],
							[
								150907,
								150921
							],
							[
								151097,
								151111
							],
							[
								151364,
								151379
							],
							[
								151438,
								151467
							],
							[
								151640,
								151680
							],
							[
								151831,
								151894
							],
							[
								152120,
								152164
							],
							[
								152244,
								152305
							],
							[
								152505,
								152515
							],
							[
								152627,
								152659
							],
							[
								152664,
								152677
							],
							[
								152868,
								152885
							],
							[
								153183,
								153209
							],
							[
								153619,
								153644
							],
							[
								154050,
								154061
							],
							[
								154727,
								154759
							],
							[
								154807,
								154839
							],
							[
								154883,
								154915
							],
							[
								154959,
								154991
							],
							[
								155067,
								155113
							],
							[
								155303,
								155371
							],
							[
								155508,
								155575
							],
							[
								156280,
								156356
							],
							[
								156484,
								156488
							],
							[
								156581,
								156633
							],
							[
								156772,
								156830
							],
							[
								157034,
								157099
							],
							[
								157363,
								157404
							]
						],
						"symlist":
						[
							" e =>",
							"() =>",
							"x =>",
							"v =>",
							"function isDictionary(x)",
							"function assertDictionary(obj, context)",
							"function assertFunction(x, context)",
							"function assertObject(x, context)",
							"function assertRequiredArgument(x, position, context)",
							"function assertRequiredField(x, field, context)",
							"function convertUnrestrictedDouble(value)",
							"function censorNegativeZero(x)",
							"function integerPart(x)",
							"function convertUnsignedLongLongWithEnforceRange(value, context)",
							"function newPromise(executor)",
							"function promiseResolvedWith(value)",
							"resolve =>",
							"function promiseRejectedWith(reason)",
							"function PerformPromiseThen(promise, onFulfilled, onRejected)",
							"function uponPromise(promise, onFulfilled, onRejected)",
							"function uponFulfillment(promise, onFulfilled)",
							"function uponRejection(promise, onRejected)",
							"function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler)",
							"function setPromiseIsHandledToTrue(promise)",
							"_queueMicrotask = callback =>",
							"_queueMicrotask = cb =>",
							"function reflectCall(F, V, args)",
							"function promiseCall(F, V, args)",
							"function ReadableStreamReaderGenericInitialize(reader, stream)",
							"function ReadableStreamReaderGenericCancel(reader, reason)",
							"function ReadableStreamReaderGenericRelease(reader)",
							"function readerLockException(name)",
							"function defaultReaderClosedPromiseInitialize(reader)",
							"(resolve, reject) =>",
							"function defaultReaderClosedPromiseInitializeAsRejected(reader, reason)",
							"function defaultReaderClosedPromiseReject(reader, reason)",
							"function defaultReaderClosedPromiseResolve(reader)",
							"function assertReadableStream(x, context)",
							"function AcquireReadableStreamDefaultReader(stream)",
							"function ReadableStreamAddReadRequest(stream, readRequest)",
							"function ReadableStreamFulfillReadRequest(stream, chunk, done)",
							"function ReadableStreamGetNumReadRequests(stream)",
							"function ReadableStreamHasDefaultReader(stream)",
							"ReadableStreamDefaultReader",
							"constructor(stream)",
							"get closed()",
							"cancel(reason = undefined)",
							"read()",
							"(resolve, reject) =>",
							"_chunkSteps: chunk =>",
							"_closeSteps: () =>",
							"_errorSteps: e =>",
							"releaseLock()",
							"ReadableStreamDefaultReader",
							"ReadableStreamDefaultReader",
							"ReadableStreamDefaultReader",
							"ReadableStreamDefaultReader",
							"function IsReadableStreamDefaultReader(x)",
							"function ReadableStreamDefaultReaderRead(reader, readRequest)",
							"function ReadableStreamDefaultReaderErrorReadRequests(reader, e)",
							"readRequest =>",
							"function defaultReaderBrandCheckException(name)",
							"function CreateArrayFromList(elements)",
							"function CanCopyDataBlockBytes(toBuffer, toIndex, fromBuffer, fromIndex, count)",
							"function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n)",
							"TransferArrayBuffer = O =>",
							"TransferArrayBuffer = buffer =>",
							"TransferArrayBuffer = buffer =>",
							"TransferArrayBuffer = buffer =>",
							"function CanTransferArrayBuffer(O)",
							"IsDetachedBuffer = O =>",
							"IsDetachedBuffer = buffer =>",
							"IsDetachedBuffer = buffer =>",
							"function ArrayBufferSlice(buffer, begin, end)",
							"function GetMethod(receiver, prop)",
							"function CreateAsyncFromSyncIterator(syncIteratorRecord)",
							"next()",
							"function AsyncFromSyncIteratorContinuation(result)",
							" v =>",
							"function GetIterator(obj, hint = 'sync', method)",
							"function IteratorNext(iteratorRecord)",
							"ReadableStreamAsyncIteratorImpl",
							"constructor(reader, preventCancel)",
							"next()",
							"nextSteps = () =>",
							"return(value)",
							"returnSteps = () =>",
							"_nextSteps()",
							"(resolve, reject) =>",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: () =>",
							"_errorSteps: reason =>",
							"_returnSteps(value)",
							" () =>",
							"next()",
							"function AcquireReadableStreamAsyncIterator(stream, preventCancel)",
							"function IsReadableStreamAsyncIterator(x)",
							"function streamAsyncIteratorBrandCheckException(name)",
							"x =>",
							"function IsNonNegativeNumber(v)",
							"function CloneAsUint8Array(O)",
							"function DequeueValue(container)",
							"function EnqueueValueWithSize(container, value, size)",
							"function PeekQueueValue(container)",
							"function ResetQueue(container)",
							"value =>",
							"function isDataView(view)",
							"DataView",
							"function arrayBufferViewElementSize(ctor)",
							"ReadableStreamBYOBRequest",
							"constructor()",
							"get view()",
							"respond(bytesWritten)",
							"respondWithNewView(view)",
							"ReadableStreamBYOBRequest",
							"ReadableStreamBYOBRequest",
							"ReadableStreamBYOBRequest",
							"ReadableByteStreamController",
							"constructor()",
							"get byobRequest()",
							"get desiredSize()",
							"close()",
							"enqueue(chunk)",
							"error(e = undefined)",
							"ReadableByteStreamController",
							"ReadableByteStreamController",
							"ReadableByteStreamController",
							"ReadableByteStreamController",
							"function IsReadableByteStreamController(x)",
							"function IsReadableStreamBYOBRequest(x)",
							"function ReadableByteStreamControllerCallPullIfNeeded(controller)",
							" () =>",
							" e =>",
							"function ReadableByteStreamControllerClearPendingPullIntos(controller)",
							"function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor)",
							"function ReadableByteStreamControllerCommitPullIntoDescriptors(stream, pullIntoDescriptors)",
							"function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor)",
							"function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength)",
							"function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength)",
							"function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor)",
							"function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)",
							"function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor)",
							"function ReadableByteStreamControllerHandleQueueDrain(controller)",
							"function ReadableByteStreamControllerInvalidateBYOBRequest(controller)",
							"function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller)",
							"function ReadableByteStreamControllerRespondInternal(controller, bytesWritten)",
							"function ReadableByteStreamControllerShiftPendingPullInto(controller)",
							"function ReadableByteStreamControllerClearAlgorithms(controller)",
							"function ReadableByteStreamControllerClose(controller)",
							"function ReadableByteStreamControllerEnqueue(controller, chunk)",
							"function ReadableByteStreamControllerError(controller, e)",
							"function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest)",
							"function ReadableByteStreamControllerGetBYOBRequest(controller)",
							"ReadableStreamBYOBRequest",
							"function ReadableByteStreamControllerGetDesiredSize(controller)",
							"function ReadableByteStreamControllerRespond(controller, bytesWritten)",
							"function ReadableByteStreamControllerRespondWithNewView(controller, view)",
							"function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize)",
							" () =>",
							" r =>",
							"function byobRequestBrandCheckException(name)",
							"function byteStreamControllerBrandCheckException(name)",
							"function convertReadableStreamReaderMode(mode, context)",
							"function AcquireReadableStreamBYOBReader(stream)",
							"function ReadableStreamAddReadIntoRequest(stream, readIntoRequest)",
							"function ReadableStreamGetNumReadIntoRequests(stream)",
							"function ReadableStreamHasBYOBReader(stream)",
							"ReadableStreamBYOBReader",
							"constructor(stream)",
							"get closed()",
							"cancel(reason = undefined)",
							"read(view, rawOptions = {})",
							"(options, context) =>",
							"(resolve, reject) =>",
							"_chunkSteps: chunk =>",
							"_closeSteps: chunk =>",
							"_errorSteps: e =>",
							"releaseLock()",
							"ReadableStreamBYOBReader",
							"ReadableStreamBYOBReader",
							"ReadableStreamBYOBReader",
							"ReadableStreamBYOBReader",
							"function IsReadableStreamBYOBReader(x)",
							"function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest)",
							"function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e)",
							"readIntoRequest =>",
							"function byobReaderBrandCheckException(name)",
							"function ExtractHighWaterMark(strategy, defaultHWM)",
							"function ExtractSizeAlgorithm(strategy)",
							" () =>",
							"function convertQueuingStrategy(init, context)",
							"function convertQueuingStrategySize(fn, context)",
							" chunk =>",
							"function assertWritableStream(x, context)",
							"function isAbortSignal(value)",
							"AbortSignal",
							"WritableStream",
							"constructor(rawUnderlyingSink = {}, rawStrategy = {})",
							"(original, context) =>",
							" reason =>",
							" () =>",
							" controller =>",
							" (chunk, controller) =>",
							"WritableStreamDefaultController",
							" () =>",
							" () =>",
							" chunk =>",
							" () =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"get locked()",
							"abort(reason = undefined)",
							"close()",
							"getWriter()",
							"WritableStream",
							"WritableStream",
							"WritableStream",
							"WritableStream",
							"function AcquireWritableStreamDefaultWriter(stream)",
							"function InitializeWritableStream(stream)",
							"function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1)",
							"WritableStream",
							"WritableStreamDefaultController",
							"function IsWritableStream(x)",
							"function IsWritableStreamLocked(stream)",
							"function WritableStreamAbort(stream, reason)",
							"(resolve, reject) =>",
							"function WritableStreamClose(stream)",
							"(resolve, reject) =>",
							"function WritableStreamDealWithRejection(stream, error)",
							"function WritableStreamStartErroring(stream, reason)",
							"function WritableStreamFinishErroring(stream)",
							"writeRequest =>",
							" () =>",
							" reason =>",
							"function WritableStreamCloseQueuedOrInFlight(stream)",
							"function WritableStreamHasOperationMarkedInFlight(stream)",
							"function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream)",
							"function WritableStreamUpdateBackpressure(stream, backpressure)",
							"WritableStreamDefaultWriter",
							"constructor(stream)",
							"get closed()",
							"get desiredSize()",
							"get ready()",
							"abort(reason = undefined)",
							"close()",
							"releaseLock()",
							"write(chunk = undefined)",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"function IsWritableStreamDefaultWriter(x)",
							"function WritableStreamDefaultWriterClose(writer)",
							"function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error)",
							"function WritableStreamDefaultWriterRelease(writer)",
							"function WritableStreamDefaultWriterWrite(writer, chunk)",
							"(resolve, reject) =>",
							"WritableStreamDefaultController",
							"constructor()",
							"get abortReason()",
							"get signal()",
							"error(e = undefined)",
							"WritableStreamDefaultController",
							"function IsWritableStreamDefaultController(x)",
							"function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm)",
							" () =>",
							" r =>",
							"function WritableStreamDefaultControllerClearAlgorithms(controller)",
							"function WritableStreamDefaultControllerClose(controller)",
							"function WritableStreamDefaultControllerGetDesiredSize(controller)",
							"function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller)",
							" () =>",
							" reason =>",
							" () =>",
							" reason =>",
							"function WritableStreamDefaultControllerErrorIfNeeded(controller, error)",
							"function WritableStreamDefaultControllerGetBackpressure(controller)",
							"function WritableStreamDefaultControllerError(controller, error)",
							"function streamBrandCheckException(name)",
							"function defaultControllerBrandCheckException(name)",
							"function defaultWriterBrandCheckException(name)",
							"function defaultWriterLockException(name)",
							"function defaultWriterClosedPromiseInitialize(writer)",
							"(resolve, reject) =>",
							"function defaultWriterClosedPromiseInitializeAsRejected(writer, reason)",
							"function defaultWriterClosedPromiseReject(writer, reason)",
							"function defaultWriterClosedPromiseResolve(writer)",
							"function defaultWriterReadyPromiseInitialize(writer)",
							"(resolve, reject) =>",
							"function defaultWriterReadyPromiseInitializeAsRejected(writer, reason)",
							"function defaultWriterReadyPromiseInitializeAsResolved(writer)",
							"function defaultWriterReadyPromiseReject(writer, reason)",
							"function defaultWriterReadyPromiseResolve(writer)",
							"function getGlobals()",
							"function isDOMExceptionConstructor(ctor)",
							"function getFromGlobal()",
							"function createPolyfill()",
							"ctor = function DOMException2(message, name)",
							"ctor",
							"ctor",
							"function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal)",
							"(resolve, reject) =>",
							"abortAlgorithm = () =>",
							"() =>",
							"() =>",
							"() =>",
							"action =>",
							" function pipeLoop()",
							"(resolveLoop, rejectLoop) =>",
							" function next(done)",
							" function pipeStep()",
							" () =>",
							"(resolveRead, rejectRead) =>",
							"_chunkSteps: chunk =>",
							"_closeSteps: () =>",
							" storedError =>",
							"() =>",
							" storedError =>",
							"() =>",
							" () =>",
							"() =>",
							"() =>",
							" function waitForWritesToFinish()",
							" () =>",
							" function isOrBecomesErrored(stream, promise, action)",
							" function isOrBecomesClosed(stream, promise, action)",
							" function shutdownWithAction(action, originalIsError, originalError)",
							" function doTheRest()",
							" () =>",
							" newError =>",
							" function shutdown(isError, error)",
							" () =>",
							" function finalize(isError, error)",
							"ReadableStreamDefaultController",
							"constructor()",
							"get desiredSize()",
							"close()",
							"enqueue(chunk = undefined)",
							"error(e = undefined)",
							"ReadableStreamDefaultController",
							"ReadableStreamDefaultController",
							"ReadableStreamDefaultController",
							"ReadableStreamDefaultController",
							"function IsReadableStreamDefaultController(x)",
							"function ReadableStreamDefaultControllerCallPullIfNeeded(controller)",
							" () =>",
							" e =>",
							"function ReadableStreamDefaultControllerShouldCallPull(controller)",
							"function ReadableStreamDefaultControllerClearAlgorithms(controller)",
							"function ReadableStreamDefaultControllerClose(controller)",
							"function ReadableStreamDefaultControllerEnqueue(controller, chunk)",
							"function ReadableStreamDefaultControllerError(controller, e)",
							"function ReadableStreamDefaultControllerGetDesiredSize(controller)",
							"function ReadableStreamDefaultControllerHasBackpressure(controller)",
							"function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)",
							"function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm)",
							" () =>",
							" r =>",
							"function defaultControllerBrandCheckException2(name)",
							"function ReadableStreamDefaultTee(stream, cloneForBranch2)",
							"resolve =>",
							" function pullAlgorithm()",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: () =>",
							"_errorSteps: () =>",
							" function cancel1Algorithm(reason)",
							" function cancel2Algorithm(reason)",
							" function startAlgorithm()",
							" r =>",
							"function ReadableByteStreamTee(stream)",
							"resolve =>",
							" function forwardReaderError(thisReader)",
							" r =>",
							" function pullWithDefaultReader()",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: () =>",
							"_errorSteps: () =>",
							" function pullWithBYOBReader(view, forBranch2)",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: chunk =>",
							"_errorSteps: () =>",
							" function pull1Algorithm()",
							" function pull2Algorithm()",
							" function cancel1Algorithm(reason)",
							" function cancel2Algorithm(reason)",
							" function startAlgorithm()",
							"function convertReadableStreamType(type, context)",
							"function convertPipeOptions(options, context)",
							"function assertAbortSignal(signal, context)",
							"ReadableStream",
							"constructor(rawUnderlyingSource = {}, rawStrategy = {})",
							"(source, context) =>",
							" reason =>",
							" controller =>",
							" controller =>",
							"ReadableByteStreamController",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"ReadableStreamDefaultController",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"get locked()",
							"cancel(reason = undefined)",
							"getReader(rawOptions = undefined)",
							"(options, context) =>",
							"pipeThrough(rawTransform, rawOptions = {})",
							"(pair, context) =>",
							"pipeTo(destination, rawOptions = {})",
							"tee()",
							"values(rawOptions = undefined)",
							"(options, context) =>",
							"static from(asyncIterable)",
							" function pullAlgorithm()",
							" readResult =>",
							" function cancelAlgorithm(reason)",
							" function pullAlgorithm()",
							" iterResult =>",
							" function cancelAlgorithm(reason)",
							" iterResult =>",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1)",
							"ReadableStream",
							"ReadableStreamDefaultController",
							"function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm)",
							"ReadableStream",
							"ReadableByteStreamController",
							"function InitializeReadableStream(stream)",
							"function IsReadableStream(x)",
							"function IsReadableStreamLocked(stream)",
							"function ReadableStreamCancel(stream, reason)",
							"readIntoRequest =>",
							"function ReadableStreamClose(stream)",
							"readRequest =>",
							"function ReadableStreamError(stream, e)",
							"function streamBrandCheckException2(name)",
							"function convertQueuingStrategyInit(init, context)",
							"byteLengthSizeFunction = chunk =>",
							"ByteLengthQueuingStrategy",
							"constructor(options)",
							"get highWaterMark()",
							"get size()",
							"ByteLengthQueuingStrategy",
							"function byteLengthBrandCheckException(name)",
							"function IsByteLengthQueuingStrategy(x)",
							"countSizeFunction = () =>",
							"CountQueuingStrategy",
							"constructor(options)",
							"get highWaterMark()",
							"get size()",
							"CountQueuingStrategy",
							"function countBrandCheckException(name)",
							"function IsCountQueuingStrategy(x)",
							"TransformStream",
							"constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {})",
							"(original, context) =>",
							" reason =>",
							" controller =>",
							" controller =>",
							" (chunk, controller) =>",
							"resolve =>",
							" function startAlgorithm()",
							" function writeAlgorithm(chunk)",
							" () =>",
							" function abortAlgorithm(reason)",
							"(resolve, reject) =>",
							" () =>",
							" r =>",
							" function closeAlgorithm()",
							"(resolve, reject) =>",
							" () =>",
							" r =>",
							" function pullAlgorithm()",
							" function cancelAlgorithm(reason)",
							"(resolve, reject) =>",
							" () =>",
							" r =>",
							"TransformStreamDefaultController",
							" chunk =>",
							" chunk =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"get readable()",
							"get writable()",
							"TransformStream",
							"function IsTransformStream(x)",
							"function TransformStreamError(stream, e)",
							"function TransformStreamErrorWritableAndUnblockWrite(stream, e)",
							"function TransformStreamUnblockWrite(stream)",
							"function TransformStreamSetBackpressure(stream, backpressure)",
							"resolve =>",
							"TransformStreamDefaultController",
							"constructor()",
							"get desiredSize()",
							"enqueue(chunk = undefined)",
							"error(reason = undefined)",
							"terminate()",
							"TransformStreamDefaultController",
							"TransformStreamDefaultController",
							"TransformStreamDefaultController",
							"TransformStreamDefaultController",
							"function IsTransformStreamDefaultController(x)",
							"function TransformStreamDefaultControllerClearAlgorithms(controller)",
							"function TransformStreamDefaultControllerEnqueue(controller, chunk)",
							"function TransformStreamDefaultControllerPerformTransform(controller, chunk)",
							" r =>",
							"function defaultControllerBrandCheckException3(name)",
							"function defaultControllerFinishPromiseResolve(controller)",
							"function defaultControllerFinishPromiseReject(controller, reason)",
							"function streamBrandCheckException3(name)"
						]
					},
					"AQAAAAAAAAAAAAAAnz0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/abort.js",
						"symkeys":
						[
							[
								57,
								68
							],
							[
								93,
								106
							],
							[
								281,
								301
							],
							[
								594,
								610
							],
							[
								1300,
								1320
							],
							[
								1384,
								1389
							],
							[
								2226,
								2246
							],
							[
								2329,
								2345
							],
							[
								2411,
								2427
							],
							[
								3233,
								3253
							],
							[
								3369,
								3380
							],
							[
								3436,
								3447
							],
							[
								3528,
								3543
							],
							[
								3548,
								3561
							],
							[
								3915,
								3928
							],
							[
								4095,
								4110
							],
							[
								4170,
								4185
							],
							[
								4257,
								4294
							],
							[
								5013,
								5046
							],
							[
								5944,
								6018
							]
						],
						"symlist":
						[
							"AbortSignal",
							"constructor()",
							"dispatchEvent(event)",
							"throwIfAborted()",
							"static timeout(time)",
							"() =>",
							"static any(iterable)",
							" function abort()",
							" function clean()",
							"static abort(reason)",
							"AbortSignal",
							"AbortSignal",
							"AbortController",
							"constructor()",
							"abort(reason)",
							"AbortController",
							"AbortController",
							"function normalizeAbortReason(reason)",
							"function createAbortEvent(reason)",
							"function define(obj, props, opts = { writable: true, configurable: true })"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/assert.js",
						"symkeys":
						[
							[
								29,
								44
							],
							[
								80,
								94
							],
							[
								113,
								147
							]
						],
						"symlist":
						[
							" function noop()",
							"AssertionError",
							"function assertImpl(test, message)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACKAQAAQWJvcnRTaWduYWwKICBjb25zdHJ1Y3RvcigpCiAgZGlzcGF0Y2hFdmVudChldmVudCkKICB0aHJvd0lmQWJvcnRlZCgpCiAgc3RhdGljIHRpbWVvdXQodGltZSkKKCkgPT4KICBzdGF0aWMgYW55KGl0ZXJhYmxlKQogIGFib3J0KCkKICBjbGVhbigpCiAgc3RhdGljIGFib3J0KHJlYXNvbikKQWJvcnRTaWduYWwKQWJvcnRTaWduYWwKQWJvcnRDb250cm9sbGVyCiAgY29uc3RydWN0b3IoKQogIGFib3J0KHJlYXNvbikKQWJvcnRDb250cm9sbGVyCkFib3J0Q29udHJvbGxlcgogIG5vcm1hbGl6ZUFib3J0UmVhc29uKHJlYXNvbikKICBjcmVhdGVBYm9ydEV2ZW50KHJlYXNvbikKICBkZWZpbmUob2JqLCBwcm9wcywgb3B0cyA9IHsgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KQAAAAAAAAAAMwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					60,
					1,
					"outline_refresh",
					{
						"path": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/tcpSocket.js",
						"symkeys":
						[
							[
								461,
								470
							],
							[
								479,
								549
							],
							[
								575,
								595
							],
							[
								1003,
								1009
							],
							[
								1100,
								1119
							],
							[
								1225,
								1233
							],
							[
								1422,
								1433
							],
							[
								1477,
								1487
							],
							[
								1562,
								1575
							],
							[
								1612,
								1632
							],
							[
								1865,
								1883
							],
							[
								2116,
								2138
							],
							[
								2185,
								2207
							],
							[
								2222,
								2240
							],
							[
								2290,
								2319
							],
							[
								2373,
								2403
							],
							[
								2632,
								2651
							],
							[
								2677,
								2697
							],
							[
								2755,
								2774
							],
							[
								2832,
								2848
							],
							[
								2906,
								2924
							],
							[
								2983,
								2998
							],
							[
								3070,
								3079
							],
							[
								3101,
								3110
							],
							[
								3164,
								3173
							],
							[
								3244,
								3253
							],
							[
								3419,
								3434
							],
							[
								3449,
								3474
							],
							[
								3566,
								3571
							],
							[
								3983,
								4003
							],
							[
								4050,
								4055
							],
							[
								4329,
								4349
							],
							[
								4407,
								4415
							],
							[
								4502,
								4507
							],
							[
								4654,
								4667
							],
							[
								4761,
								4781
							],
							[
								4819,
								4824
							],
							[
								4860,
								4881
							],
							[
								5013,
								5025
							],
							[
								5060,
								5072
							],
							[
								5179,
								5185
							],
							[
								5414,
								5424
							],
							[
								5462,
								5470
							],
							[
								5499,
								5516
							],
							[
								5597,
								5604
							],
							[
								5638,
								5653
							]
						],
						"symlist":
						[
							"TCPSocket",
							"EventTargetProperties(['accept', 'open', 'error', 'message', 'close'])",
							"constructor(...args)",
							" ctx =>",
							"bind(address, port)",
							"listen()",
							"close(code)",
							"send(data)",
							"static lws(s)",
							"create(s, connectFn)",
							"onRawAdopt: wsi =>",
							"onRawConnected: wsi =>",
							"onRawWriteable: wsi =>",
							"onRawClose: wsi =>",
							"onRawRx: (wsi, data, size) =>",
							"callback(wsi, reason, ...args)",
							"static waitWrite(s)",
							"(resolve, reject) =>",
							"get remoteAddress()",
							"get remotePort()",
							"get localAddress()",
							"get localPort()",
							"TCPSocket",
							"TCPSocket",
							"TCPSocket",
							"TCPSocket",
							"TCPSocketStream",
							"constructor(options = {})",
							" () =>",
							"(resolve, reject) =>",
							" () =>",
							"start: controller =>",
							" event =>",
							" () =>",
							"cancel: () =>",
							"start: controller =>",
							" () =>",
							"write: async chunk =>",
							"close: () =>",
							"abort: () =>",
							" err =>",
							"resolve =>",
							" event =>",
							"static socket(ss)",
							"close()",
							"TCPSocketStream"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAzAAAAICBub29wKCkKQXNzZXJ0aW9uRXJyb3IKICBhc3NlcnRJbXBsKHRlc3QsIG1lc3NhZ2UpAAAAAAAAAAAsAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					61,
					1,
					"outline_refresh",
					{
						"path": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/streams.js",
						"symkeys":
						[
							[
								359,
								363
							],
							[
								430,
								435
							],
							[
								571,
								575
							],
							[
								674,
								678
							],
							[
								752,
								776
							],
							[
								839,
								878
							],
							[
								983,
								1018
							],
							[
								1107,
								1140
							],
							[
								1222,
								1275
							],
							[
								1378,
								1425
							],
							[
								1515,
								1556
							],
							[
								1586,
								1616
							],
							[
								1648,
								1671
							],
							[
								1720,
								1784
							],
							[
								2526,
								2555
							],
							[
								2601,
								2636
							],
							[
								2659,
								2669
							],
							[
								2690,
								2726
							],
							[
								2772,
								2833
							],
							[
								2908,
								2962
							],
							[
								3087,
								3133
							],
							[
								3176,
								3219
							],
							[
								3272,
								3348
							],
							[
								3430,
								3473
							],
							[
								3557,
								3586
							],
							[
								3746,
								3769
							],
							[
								3856,
								3888
							],
							[
								4026,
								4058
							],
							[
								4623,
								4685
							],
							[
								5142,
								5200
							],
							[
								5331,
								5382
							],
							[
								6096,
								6130
							],
							[
								6216,
								6269
							],
							[
								6322,
								6342
							],
							[
								6478,
								6549
							],
							[
								6655,
								6712
							],
							[
								6956,
								7006
							],
							[
								7244,
								7285
							],
							[
								7423,
								7474
							],
							[
								7530,
								7588
							],
							[
								7740,
								7802
							],
							[
								8013,
								8062
							],
							[
								8114,
								8161
							],
							[
								8328,
								8355
							],
							[
								8360,
								8379
							],
							[
								8966,
								8978
							],
							[
								9254,
								9280
							],
							[
								9810,
								9816
							],
							[
								10122,
								10142
							],
							[
								10247,
								10268
							],
							[
								10322,
								10340
							],
							[
								10397,
								10414
							],
							[
								11144,
								11157
							],
							[
								11701,
								11728
							],
							[
								11774,
								11801
							],
							[
								11843,
								11870
							],
							[
								11918,
								11945
							],
							[
								12016,
								12057
							],
							[
								12229,
								12290
							],
							[
								12677,
								12741
							],
							[
								12856,
								12870
							],
							[
								12903,
								12950
							],
							[
								13117,
								13155
							],
							[
								13188,
								13267
							],
							[
								13459,
								13523
							],
							[
								13610,
								13636
							],
							[
								13677,
								13708
							],
							[
								13776,
								13807
							],
							[
								13864,
								13895
							],
							[
								13941,
								13975
							],
							[
								14018,
								14041
							],
							[
								14081,
								14109
							],
							[
								14134,
								14162
							],
							[
								14222,
								14267
							],
							[
								14467,
								14501
							],
							[
								14703,
								14759
							],
							[
								14866,
								14872
							],
							[
								15888,
								15938
							],
							[
								16103,
								16107
							],
							[
								16188,
								16236
							],
							[
								17012,
								17049
							],
							[
								17317,
								17348
							],
							[
								17353,
								17387
							],
							[
								17515,
								17521
							],
							[
								17534,
								17551
							],
							[
								17741,
								17754
							],
							[
								17767,
								17786
							],
							[
								17989,
								18001
							],
							[
								18253,
								18273
							],
							[
								18378,
								18399
							],
							[
								18468,
								18473
							],
							[
								18537,
								18555
							],
							[
								18758,
								18780
							],
							[
								19042,
								19061
							],
							[
								19494,
								19499
							],
							[
								19691,
								19697
							],
							[
								20371,
								20437
							],
							[
								20708,
								20749
							],
							[
								20996,
								21049
							],
							[
								21232,
								21236
							],
							[
								21289,
								21320
							],
							[
								21443,
								21472
							],
							[
								21643,
								21675
							],
							[
								21958,
								22011
							],
							[
								22295,
								22329
							],
							[
								22502,
								22532
							],
							[
								22755,
								22763
							],
							[
								22882,
								22907
							],
							[
								22929,
								22937
							],
							[
								23011,
								23052
							],
							[
								23201,
								23226
							],
							[
								23231,
								23244
							],
							[
								23416,
								23426
							],
							[
								23548,
								23569
							],
							[
								24284,
								24308
							],
							[
								25152,
								25177
							],
							[
								25225,
								25250
							],
							[
								25312,
								25337
							],
							[
								25419,
								25447
							],
							[
								25452,
								25465
							],
							[
								25609,
								25626
							],
							[
								26052,
								26069
							],
							[
								26450,
								26457
							],
							[
								26920,
								26934
							],
							[
								27850,
								27870
							],
							[
								29972,
								30000
							],
							[
								30044,
								30072
							],
							[
								30120,
								30148
							],
							[
								30184,
								30212
							],
							[
								30284,
								30326
							],
							[
								30515,
								30554
							],
							[
								30750,
								30815
							],
							[
								31631,
								31636
							],
							[
								31851,
								31855
							],
							[
								31948,
								32018
							],
							[
								32141,
								32230
							],
							[
								33014,
								33105
							],
							[
								33251,
								33333
							],
							[
								33680,
								33780
							],
							[
								33892,
								33998
							],
							[
								34305,
								34401
							],
							[
								34705,
								34805
							],
							[
								36633,
								36734
							],
							[
								36941,
								37006
							],
							[
								37361,
								37431
							],
							[
								37637,
								37722
							],
							[
								38272,
								38350
							],
							[
								40825,
								40894
							],
							[
								41024,
								41088
							],
							[
								41178,
								41232
							],
							[
								41928,
								41991
							],
							[
								44612,
								44669
							],
							[
								44960,
								45046
							],
							[
								45361,
								45424
							],
							[
								45787,
								45812
							],
							[
								46187,
								46250
							],
							[
								46456,
								46526
							],
							[
								47309,
								47382
							],
							[
								48623,
								48771
							],
							[
								49688,
								49693
							],
							[
								49898,
								49902
							],
							[
								49995,
								50040
							],
							[
								50165,
								50219
							],
							[
								50391,
								50446
							],
							[
								50657,
								50705
							],
							[
								50758,
								50824
							],
							[
								51010,
								51063
							],
							[
								51119,
								51163
							],
							[
								51327,
								51351
							],
							[
								51356,
								51375
							],
							[
								52153,
								52165
							],
							[
								52435,
								52461
							],
							[
								52749,
								52776
							],
							[
								53400,
								53421
							],
							[
								54409,
								54429
							],
							[
								54538,
								54559
							],
							[
								54613,
								54634
							],
							[
								54687,
								54704
							],
							[
								55443,
								55456
							],
							[
								55993,
								56017
							],
							[
								56063,
								56087
							],
							[
								56129,
								56153
							],
							[
								56201,
								56225
							],
							[
								56293,
								56331
							],
							[
								56504,
								56577
							],
							[
								58902,
								58967
							],
							[
								59098,
								59116
							],
							[
								59153,
								59197
							],
							[
								59364,
								59415
							],
							[
								59637,
								59676
							],
							[
								59727,
								59732
							],
							[
								59796,
								59842
							],
							[
								60240,
								60288
							],
							[
								60331,
								60339
							],
							[
								60422,
								60463
							],
							[
								60583,
								60612
							],
							[
								60697,
								60708
							],
							[
								60878,
								60892
							],
							[
								60897,
								60950
							],
							[
								61186,
								61208
							],
							[
								61713,
								61722
							],
							[
								61875,
								61880
							],
							[
								62027,
								62040
							],
							[
								62197,
								62219
							],
							[
								62650,
								62681
							],
							[
								62758,
								62763
							],
							[
								62799,
								62804
							],
							[
								62880,
								62888
							],
							[
								62931,
								62936
							],
							[
								63033,
								63038
							],
							[
								63064,
								63069
							],
							[
								63166,
								63175
							],
							[
								63207,
								63212
							],
							[
								63489,
								63501
							],
							[
								64201,
								64226
							],
							[
								65084,
								65091
							],
							[
								66053,
								66064
							],
							[
								66411,
								66425
							],
							[
								66469,
								66483
							],
							[
								66527,
								66541
							],
							[
								66585,
								66599
							],
							[
								66657,
								66708
							],
							[
								66764,
								66805
							],
							[
								67163,
								67300
							],
							[
								67380,
								67394
							],
							[
								67478,
								67509
							],
							[
								67696,
								67724
							],
							[
								67895,
								67934
							],
							[
								68040,
								68084
							],
							[
								68772,
								68792
							],
							[
								69131,
								69167
							],
							[
								69513,
								69533
							],
							[
								70002,
								70057
							],
							[
								70258,
								70310
							],
							[
								70801,
								70846
							],
							[
								71103,
								71118
							],
							[
								71703,
								71708
							],
							[
								71837,
								71846
							],
							[
								71984,
								72036
							],
							[
								72158,
								72215
							],
							[
								72345,
								72411
							],
							[
								72775,
								72838
							],
							[
								73384,
								73411
							],
							[
								73416,
								73435
							],
							[
								74903,
								74915
							],
							[
								75567,
								75584
							],
							[
								76552,
								76563
							],
							[
								76835,
								76860
							],
							[
								77337,
								77344
							],
							[
								78525,
								78538
							],
							[
								78819,
								78843
							],
							[
								79463,
								79490
							],
							[
								79534,
								79561
							],
							[
								79605,
								79632
							],
							[
								79688,
								79715
							],
							[
								79751,
								79778
							],
							[
								79849,
								79890
							],
							[
								80069,
								80118
							],
							[
								80240,
								80317
							],
							[
								80614,
								80665
							],
							[
								81421,
								81477
							],
							[
								82634,
								82654
							],
							[
								83318,
								83349
							],
							[
								83354,
								83367
							],
							[
								83742,
								83759
							],
							[
								84032,
								84044
							],
							[
								84761,
								84781
							],
							[
								85462,
								85493
							],
							[
								85568,
								85613
							],
							[
								85801,
								85960
							],
							[
								86905,
								86910
							],
							[
								87122,
								87126
							],
							[
								87321,
								87388
							],
							[
								87569,
								87626
							],
							[
								87753,
								87819
							],
							[
								87888,
								87960
							],
							[
								88844,
								88849
							],
							[
								89676,
								89685
							],
							[
								90488,
								90493
							],
							[
								91154,
								91163
							],
							[
								91607,
								91679
							],
							[
								91806,
								91873
							],
							[
								91987,
								92051
							],
							[
								92259,
								92299
							],
							[
								92402,
								92453
							],
							[
								92590,
								92637
							],
							[
								92766,
								92807
							],
							[
								92893,
								92946
							],
							[
								92999,
								93019
							],
							[
								93213,
								93284
							],
							[
								93390,
								93447
							],
							[
								93785,
								93835
							],
							[
								94126,
								94178
							],
							[
								94230,
								94250
							],
							[
								94378,
								94448
							],
							[
								94552,
								94614
							],
							[
								94711,
								94767
							],
							[
								95048,
								95097
							],
							[
								95351,
								95372
							],
							[
								95622,
								95662
							],
							[
								95870,
								95894
							],
							[
								96043,
								96068
							],
							[
								96079,
								96123
							],
							[
								96322,
								96326
							],
							[
								96395,
								96399
							],
							[
								96592,
								96686
							],
							[
								97282,
								97302
							],
							[
								97366,
								97388
							],
							[
								97581,
								97586
							],
							[
								97799,
								97804
							],
							[
								97997,
								98002
							],
							[
								98027,
								98036
							],
							[
								98215,
								98234
							],
							[
								98261,
								98289
							],
							[
								98300,
								98319
							],
							[
								98472,
								98491
							],
							[
								98605,
								98610
							],
							[
								98639,
								98667
							],
							[
								98734,
								98755
							],
							[
								98934,
								98952
							],
							[
								99105,
								99119
							],
							[
								99165,
								99170
							],
							[
								99350,
								99364
							],
							[
								99411,
								99416
							],
							[
								99600,
								99605
							],
							[
								99659,
								99664
							],
							[
								100425,
								100430
							],
							[
								100584,
								100616
							],
							[
								100709,
								100714
							],
							[
								100800,
								100852
							],
							[
								100974,
								101025
							],
							[
								101129,
								101196
							],
							[
								101422,
								101442
							],
							[
								101496,
								101501
							],
							[
								101554,
								101565
							],
							[
								101642,
								101675
							],
							[
								101859,
								101864
							],
							[
								101939,
								101972
							],
							[
								102319,
								102350
							],
							[
								102355,
								102368
							],
							[
								102668,
								102685
							],
							[
								103070,
								103077
							],
							[
								103374,
								103400
							],
							[
								103843,
								103863
							],
							[
								105092,
								105123
							],
							[
								105167,
								105198
							],
							[
								105246,
								105277
							],
							[
								105313,
								105344
							],
							[
								105419,
								105464
							],
							[
								105652,
								105720
							],
							[
								106059,
								106064
							],
							[
								106282,
								106286
							],
							[
								106382,
								106448
							],
							[
								106869,
								106936
							],
							[
								107075,
								107132
							],
							[
								107446,
								107512
							],
							[
								108274,
								108334
							],
							[
								108559,
								108625
							],
							[
								108827,
								108894
							],
							[
								108969,
								109038
							],
							[
								109191,
								109334
							],
							[
								110026,
								110031
							],
							[
								110239,
								110243
							],
							[
								110339,
								110391
							],
							[
								110563,
								110621
							],
							[
								110989,
								110999
							],
							[
								111037,
								111061
							],
							[
								111209,
								111230
							],
							[
								111257,
								111262
							],
							[
								111669,
								111687
							],
							[
								111992,
								112010
							],
							[
								112145,
								112178
							],
							[
								112471,
								112504
							],
							[
								112797,
								112822
							],
							[
								113031,
								113035
							],
							[
								113319,
								113357
							],
							[
								113797,
								113807
							],
							[
								113845,
								113884
							],
							[
								113932,
								113936
							],
							[
								114244,
								114276
							],
							[
								114558,
								114579
							],
							[
								114606,
								114611
							],
							[
								115571,
								115589
							],
							[
								116188,
								116206
							],
							[
								116298,
								116343
							],
							[
								116736,
								116757
							],
							[
								116784,
								116789
							],
							[
								118009,
								118030
							],
							[
								118866,
								118884
							],
							[
								118986,
								119011
							],
							[
								119399,
								119424
							],
							[
								119811,
								119844
							],
							[
								120137,
								120170
							],
							[
								120463,
								120488
							],
							[
								120790,
								120839
							],
							[
								121041,
								121086
							],
							[
								121666,
								121709
							],
							[
								121845,
								121859
							],
							[
								121864,
								121919
							],
							[
								122163,
								122183
							],
							[
								122952,
								122961
							],
							[
								123111,
								123124
							],
							[
								123280,
								123293
							],
							[
								123819,
								123847
							],
							[
								123928,
								123933
							],
							[
								123971,
								123976
							],
							[
								124054,
								124059
							],
							[
								124096,
								124101
							],
							[
								124204,
								124213
							],
							[
								124248,
								124253
							],
							[
								124841,
								124872
							],
							[
								124953,
								124958
							],
							[
								124996,
								125001
							],
							[
								125079,
								125084
							],
							[
								125121,
								125126
							],
							[
								125229,
								125238
							],
							[
								125273,
								125278
							],
							[
								125577,
								125589
							],
							[
								125982,
								126008
							],
							[
								126295,
								126328
							],
							[
								126431,
								126452
							],
							[
								126923,
								126965
							],
							[
								127132,
								127150
							],
							[
								128299,
								128335
							],
							[
								129900,
								129905
							],
							[
								130245,
								130275
							],
							[
								130375,
								130396
							],
							[
								131234,
								131260
							],
							[
								131458,
								131482
							],
							[
								131684,
								131697
							],
							[
								132152,
								132184
							],
							[
								132577,
								132601
							],
							[
								132861,
								132874
							],
							[
								133338,
								133370
							],
							[
								133777,
								133790
							],
							[
								134524,
								134538
							],
							[
								134584,
								134598
							],
							[
								134650,
								134664
							],
							[
								134720,
								134734
							],
							[
								134780,
								134794
							],
							[
								134834,
								134848
							],
							[
								134886,
								134900
							],
							[
								134980,
								134994
							],
							[
								135039,
								135053
							],
							[
								135117,
								135238
							],
							[
								135318,
								135332
							],
							[
								135416,
								135447
							],
							[
								135618,
								135699
							],
							[
								135733,
								135747
							],
							[
								135831,
								135859
							],
							[
								136011,
								136052
							],
							[
								136164,
								136192
							],
							[
								136363,
								136402
							],
							[
								136508,
								136553
							],
							[
								137002,
								137020
							],
							[
								137213,
								137249
							],
							[
								137596,
								137610
							],
							[
								137646,
								137685
							],
							[
								138169,
								138210
							],
							[
								138360,
								138410
							],
							[
								138726,
								138759
							],
							[
								138855,
								138880
							],
							[
								138885,
								138905
							],
							[
								139214,
								139233
							],
							[
								139496,
								139506
							],
							[
								139787,
								139812
							],
							[
								139881,
								139925
							],
							[
								140050,
								140089
							],
							[
								140328,
								140353
							],
							[
								140415,
								140435
							],
							[
								140440,
								140460
							],
							[
								140759,
								140778
							],
							[
								141089,
								141099
							],
							[
								141360,
								141380
							],
							[
								141444,
								141483
							],
							[
								141598,
								141632
							],
							[
								141862,
								141877
							],
							[
								141882,
								141966
							],
							[
								142241,
								142263
							],
							[
								142879,
								142888
							],
							[
								143042,
								143055
							],
							[
								143234,
								143247
							],
							[
								143430,
								143452
							],
							[
								144157,
								144167
							],
							[
								144244,
								144269
							],
							[
								144316,
								144346
							],
							[
								144704,
								144709
							],
							[
								145119,
								145150
							],
							[
								145391,
								145411
							],
							[
								145726,
								145731
							],
							[
								146112,
								146116
							],
							[
								146379,
								146404
							],
							[
								146645,
								146665
							],
							[
								146971,
								146976
							],
							[
								147349,
								147353
							],
							[
								147772,
								147796
							],
							[
								148022,
								148054
							],
							[
								148295,
								148315
							],
							[
								148630,
								148635
							],
							[
								149075,
								149079
							],
							[
								149851,
								149883
							],
							[
								149980,
								149988
							],
							[
								150040,
								150048
							],
							[
								150385,
								150390
							],
							[
								150423,
								150428
							],
							[
								150524,
								150533
							],
							[
								150563,
								150568
							],
							[
								150907,
								150921
							],
							[
								151097,
								151111
							],
							[
								151364,
								151379
							],
							[
								151438,
								151467
							],
							[
								151640,
								151680
							],
							[
								151831,
								151894
							],
							[
								152120,
								152164
							],
							[
								152244,
								152305
							],
							[
								152505,
								152515
							],
							[
								152627,
								152659
							],
							[
								152664,
								152677
							],
							[
								152868,
								152885
							],
							[
								153183,
								153209
							],
							[
								153619,
								153644
							],
							[
								154050,
								154061
							],
							[
								154727,
								154759
							],
							[
								154807,
								154839
							],
							[
								154883,
								154915
							],
							[
								154959,
								154991
							],
							[
								155067,
								155113
							],
							[
								155303,
								155371
							],
							[
								155508,
								155575
							],
							[
								156280,
								156356
							],
							[
								156484,
								156488
							],
							[
								156581,
								156633
							],
							[
								156772,
								156830
							],
							[
								157034,
								157099
							],
							[
								157363,
								157404
							]
						],
						"symlist":
						[
							" e =>",
							"() =>",
							"x =>",
							"v =>",
							"function isDictionary(x)",
							"function assertDictionary(obj, context)",
							"function assertFunction(x, context)",
							"function assertObject(x, context)",
							"function assertRequiredArgument(x, position, context)",
							"function assertRequiredField(x, field, context)",
							"function convertUnrestrictedDouble(value)",
							"function censorNegativeZero(x)",
							"function integerPart(x)",
							"function convertUnsignedLongLongWithEnforceRange(value, context)",
							"function newPromise(executor)",
							"function promiseResolvedWith(value)",
							"resolve =>",
							"function promiseRejectedWith(reason)",
							"function PerformPromiseThen(promise, onFulfilled, onRejected)",
							"function uponPromise(promise, onFulfilled, onRejected)",
							"function uponFulfillment(promise, onFulfilled)",
							"function uponRejection(promise, onRejected)",
							"function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler)",
							"function setPromiseIsHandledToTrue(promise)",
							"_queueMicrotask = callback =>",
							"_queueMicrotask = cb =>",
							"function reflectCall(F, V, args)",
							"function promiseCall(F, V, args)",
							"function ReadableStreamReaderGenericInitialize(reader, stream)",
							"function ReadableStreamReaderGenericCancel(reader, reason)",
							"function ReadableStreamReaderGenericRelease(reader)",
							"function readerLockException(name)",
							"function defaultReaderClosedPromiseInitialize(reader)",
							"(resolve, reject) =>",
							"function defaultReaderClosedPromiseInitializeAsRejected(reader, reason)",
							"function defaultReaderClosedPromiseReject(reader, reason)",
							"function defaultReaderClosedPromiseResolve(reader)",
							"function assertReadableStream(x, context)",
							"function AcquireReadableStreamDefaultReader(stream)",
							"function ReadableStreamAddReadRequest(stream, readRequest)",
							"function ReadableStreamFulfillReadRequest(stream, chunk, done)",
							"function ReadableStreamGetNumReadRequests(stream)",
							"function ReadableStreamHasDefaultReader(stream)",
							"ReadableStreamDefaultReader",
							"constructor(stream)",
							"get closed()",
							"cancel(reason = undefined)",
							"read()",
							"(resolve, reject) =>",
							"_chunkSteps: chunk =>",
							"_closeSteps: () =>",
							"_errorSteps: e =>",
							"releaseLock()",
							"ReadableStreamDefaultReader",
							"ReadableStreamDefaultReader",
							"ReadableStreamDefaultReader",
							"ReadableStreamDefaultReader",
							"function IsReadableStreamDefaultReader(x)",
							"function ReadableStreamDefaultReaderRead(reader, readRequest)",
							"function ReadableStreamDefaultReaderErrorReadRequests(reader, e)",
							"readRequest =>",
							"function defaultReaderBrandCheckException(name)",
							"function CreateArrayFromList(elements)",
							"function CanCopyDataBlockBytes(toBuffer, toIndex, fromBuffer, fromIndex, count)",
							"function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n)",
							"TransferArrayBuffer = O =>",
							"TransferArrayBuffer = buffer =>",
							"TransferArrayBuffer = buffer =>",
							"TransferArrayBuffer = buffer =>",
							"function CanTransferArrayBuffer(O)",
							"IsDetachedBuffer = O =>",
							"IsDetachedBuffer = buffer =>",
							"IsDetachedBuffer = buffer =>",
							"function ArrayBufferSlice(buffer, begin, end)",
							"function GetMethod(receiver, prop)",
							"function CreateAsyncFromSyncIterator(syncIteratorRecord)",
							"next()",
							"function AsyncFromSyncIteratorContinuation(result)",
							" v =>",
							"function GetIterator(obj, hint = 'sync', method)",
							"function IteratorNext(iteratorRecord)",
							"ReadableStreamAsyncIteratorImpl",
							"constructor(reader, preventCancel)",
							"next()",
							"nextSteps = () =>",
							"return(value)",
							"returnSteps = () =>",
							"_nextSteps()",
							"(resolve, reject) =>",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: () =>",
							"_errorSteps: reason =>",
							"_returnSteps(value)",
							" () =>",
							"next()",
							"function AcquireReadableStreamAsyncIterator(stream, preventCancel)",
							"function IsReadableStreamAsyncIterator(x)",
							"function streamAsyncIteratorBrandCheckException(name)",
							"x =>",
							"function IsNonNegativeNumber(v)",
							"function CloneAsUint8Array(O)",
							"function DequeueValue(container)",
							"function EnqueueValueWithSize(container, value, size)",
							"function PeekQueueValue(container)",
							"function ResetQueue(container)",
							"value =>",
							"function isDataView(view)",
							"DataView",
							"function arrayBufferViewElementSize(ctor)",
							"ReadableStreamBYOBRequest",
							"constructor()",
							"get view()",
							"respond(bytesWritten)",
							"respondWithNewView(view)",
							"ReadableStreamBYOBRequest",
							"ReadableStreamBYOBRequest",
							"ReadableStreamBYOBRequest",
							"ReadableByteStreamController",
							"constructor()",
							"get byobRequest()",
							"get desiredSize()",
							"close()",
							"enqueue(chunk)",
							"error(e = undefined)",
							"ReadableByteStreamController",
							"ReadableByteStreamController",
							"ReadableByteStreamController",
							"ReadableByteStreamController",
							"function IsReadableByteStreamController(x)",
							"function IsReadableStreamBYOBRequest(x)",
							"function ReadableByteStreamControllerCallPullIfNeeded(controller)",
							" () =>",
							" e =>",
							"function ReadableByteStreamControllerClearPendingPullIntos(controller)",
							"function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor)",
							"function ReadableByteStreamControllerCommitPullIntoDescriptors(stream, pullIntoDescriptors)",
							"function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor)",
							"function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength)",
							"function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength)",
							"function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor)",
							"function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)",
							"function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor)",
							"function ReadableByteStreamControllerHandleQueueDrain(controller)",
							"function ReadableByteStreamControllerInvalidateBYOBRequest(controller)",
							"function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller)",
							"function ReadableByteStreamControllerRespondInternal(controller, bytesWritten)",
							"function ReadableByteStreamControllerShiftPendingPullInto(controller)",
							"function ReadableByteStreamControllerClearAlgorithms(controller)",
							"function ReadableByteStreamControllerClose(controller)",
							"function ReadableByteStreamControllerEnqueue(controller, chunk)",
							"function ReadableByteStreamControllerError(controller, e)",
							"function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest)",
							"function ReadableByteStreamControllerGetBYOBRequest(controller)",
							"ReadableStreamBYOBRequest",
							"function ReadableByteStreamControllerGetDesiredSize(controller)",
							"function ReadableByteStreamControllerRespond(controller, bytesWritten)",
							"function ReadableByteStreamControllerRespondWithNewView(controller, view)",
							"function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize)",
							" () =>",
							" r =>",
							"function byobRequestBrandCheckException(name)",
							"function byteStreamControllerBrandCheckException(name)",
							"function convertReadableStreamReaderMode(mode, context)",
							"function AcquireReadableStreamBYOBReader(stream)",
							"function ReadableStreamAddReadIntoRequest(stream, readIntoRequest)",
							"function ReadableStreamGetNumReadIntoRequests(stream)",
							"function ReadableStreamHasBYOBReader(stream)",
							"ReadableStreamBYOBReader",
							"constructor(stream)",
							"get closed()",
							"cancel(reason = undefined)",
							"read(view, rawOptions = {})",
							"(options, context) =>",
							"(resolve, reject) =>",
							"_chunkSteps: chunk =>",
							"_closeSteps: chunk =>",
							"_errorSteps: e =>",
							"releaseLock()",
							"ReadableStreamBYOBReader",
							"ReadableStreamBYOBReader",
							"ReadableStreamBYOBReader",
							"ReadableStreamBYOBReader",
							"function IsReadableStreamBYOBReader(x)",
							"function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest)",
							"function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e)",
							"readIntoRequest =>",
							"function byobReaderBrandCheckException(name)",
							"function ExtractHighWaterMark(strategy, defaultHWM)",
							"function ExtractSizeAlgorithm(strategy)",
							" () =>",
							"function convertQueuingStrategy(init, context)",
							"function convertQueuingStrategySize(fn, context)",
							" chunk =>",
							"function assertWritableStream(x, context)",
							"function isAbortSignal(value)",
							"AbortSignal",
							"WritableStream",
							"constructor(rawUnderlyingSink = {}, rawStrategy = {})",
							"(original, context) =>",
							" reason =>",
							" () =>",
							" controller =>",
							" (chunk, controller) =>",
							"WritableStreamDefaultController",
							" () =>",
							" () =>",
							" chunk =>",
							" () =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"get locked()",
							"abort(reason = undefined)",
							"close()",
							"getWriter()",
							"WritableStream",
							"WritableStream",
							"WritableStream",
							"WritableStream",
							"function AcquireWritableStreamDefaultWriter(stream)",
							"function InitializeWritableStream(stream)",
							"function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1)",
							"WritableStream",
							"WritableStreamDefaultController",
							"function IsWritableStream(x)",
							"function IsWritableStreamLocked(stream)",
							"function WritableStreamAbort(stream, reason)",
							"(resolve, reject) =>",
							"function WritableStreamClose(stream)",
							"(resolve, reject) =>",
							"function WritableStreamDealWithRejection(stream, error)",
							"function WritableStreamStartErroring(stream, reason)",
							"function WritableStreamFinishErroring(stream)",
							"writeRequest =>",
							" () =>",
							" reason =>",
							"function WritableStreamCloseQueuedOrInFlight(stream)",
							"function WritableStreamHasOperationMarkedInFlight(stream)",
							"function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream)",
							"function WritableStreamUpdateBackpressure(stream, backpressure)",
							"WritableStreamDefaultWriter",
							"constructor(stream)",
							"get closed()",
							"get desiredSize()",
							"get ready()",
							"abort(reason = undefined)",
							"close()",
							"releaseLock()",
							"write(chunk = undefined)",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"WritableStreamDefaultWriter",
							"function IsWritableStreamDefaultWriter(x)",
							"function WritableStreamDefaultWriterClose(writer)",
							"function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error)",
							"function WritableStreamDefaultWriterRelease(writer)",
							"function WritableStreamDefaultWriterWrite(writer, chunk)",
							"(resolve, reject) =>",
							"WritableStreamDefaultController",
							"constructor()",
							"get abortReason()",
							"get signal()",
							"error(e = undefined)",
							"WritableStreamDefaultController",
							"function IsWritableStreamDefaultController(x)",
							"function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm)",
							" () =>",
							" r =>",
							"function WritableStreamDefaultControllerClearAlgorithms(controller)",
							"function WritableStreamDefaultControllerClose(controller)",
							"function WritableStreamDefaultControllerGetDesiredSize(controller)",
							"function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller)",
							" () =>",
							" reason =>",
							" () =>",
							" reason =>",
							"function WritableStreamDefaultControllerErrorIfNeeded(controller, error)",
							"function WritableStreamDefaultControllerGetBackpressure(controller)",
							"function WritableStreamDefaultControllerError(controller, error)",
							"function streamBrandCheckException(name)",
							"function defaultControllerBrandCheckException(name)",
							"function defaultWriterBrandCheckException(name)",
							"function defaultWriterLockException(name)",
							"function defaultWriterClosedPromiseInitialize(writer)",
							"(resolve, reject) =>",
							"function defaultWriterClosedPromiseInitializeAsRejected(writer, reason)",
							"function defaultWriterClosedPromiseReject(writer, reason)",
							"function defaultWriterClosedPromiseResolve(writer)",
							"function defaultWriterReadyPromiseInitialize(writer)",
							"(resolve, reject) =>",
							"function defaultWriterReadyPromiseInitializeAsRejected(writer, reason)",
							"function defaultWriterReadyPromiseInitializeAsResolved(writer)",
							"function defaultWriterReadyPromiseReject(writer, reason)",
							"function defaultWriterReadyPromiseResolve(writer)",
							"function getGlobals()",
							"function isDOMExceptionConstructor(ctor)",
							"function getFromGlobal()",
							"function createPolyfill()",
							"ctor = function DOMException2(message, name)",
							"ctor",
							"ctor",
							"function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal)",
							"(resolve, reject) =>",
							"abortAlgorithm = () =>",
							"() =>",
							"() =>",
							"() =>",
							"action =>",
							" function pipeLoop()",
							"(resolveLoop, rejectLoop) =>",
							" function next(done)",
							" function pipeStep()",
							" () =>",
							"(resolveRead, rejectRead) =>",
							"_chunkSteps: chunk =>",
							"_closeSteps: () =>",
							" storedError =>",
							"() =>",
							" storedError =>",
							"() =>",
							" () =>",
							"() =>",
							"() =>",
							" function waitForWritesToFinish()",
							" () =>",
							" function isOrBecomesErrored(stream, promise, action)",
							" function isOrBecomesClosed(stream, promise, action)",
							" function shutdownWithAction(action, originalIsError, originalError)",
							" function doTheRest()",
							" () =>",
							" newError =>",
							" function shutdown(isError, error)",
							" () =>",
							" function finalize(isError, error)",
							"ReadableStreamDefaultController",
							"constructor()",
							"get desiredSize()",
							"close()",
							"enqueue(chunk = undefined)",
							"error(e = undefined)",
							"ReadableStreamDefaultController",
							"ReadableStreamDefaultController",
							"ReadableStreamDefaultController",
							"ReadableStreamDefaultController",
							"function IsReadableStreamDefaultController(x)",
							"function ReadableStreamDefaultControllerCallPullIfNeeded(controller)",
							" () =>",
							" e =>",
							"function ReadableStreamDefaultControllerShouldCallPull(controller)",
							"function ReadableStreamDefaultControllerClearAlgorithms(controller)",
							"function ReadableStreamDefaultControllerClose(controller)",
							"function ReadableStreamDefaultControllerEnqueue(controller, chunk)",
							"function ReadableStreamDefaultControllerError(controller, e)",
							"function ReadableStreamDefaultControllerGetDesiredSize(controller)",
							"function ReadableStreamDefaultControllerHasBackpressure(controller)",
							"function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)",
							"function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm)",
							" () =>",
							" r =>",
							"function defaultControllerBrandCheckException2(name)",
							"function ReadableStreamDefaultTee(stream, cloneForBranch2)",
							"resolve =>",
							" function pullAlgorithm()",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: () =>",
							"_errorSteps: () =>",
							" function cancel1Algorithm(reason)",
							" function cancel2Algorithm(reason)",
							" function startAlgorithm()",
							" r =>",
							"function ReadableByteStreamTee(stream)",
							"resolve =>",
							" function forwardReaderError(thisReader)",
							" r =>",
							" function pullWithDefaultReader()",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: () =>",
							"_errorSteps: () =>",
							" function pullWithBYOBReader(view, forBranch2)",
							"_chunkSteps: chunk =>",
							"() =>",
							"_closeSteps: chunk =>",
							"_errorSteps: () =>",
							" function pull1Algorithm()",
							" function pull2Algorithm()",
							" function cancel1Algorithm(reason)",
							" function cancel2Algorithm(reason)",
							" function startAlgorithm()",
							"function convertReadableStreamType(type, context)",
							"function convertPipeOptions(options, context)",
							"function assertAbortSignal(signal, context)",
							"ReadableStream",
							"constructor(rawUnderlyingSource = {}, rawStrategy = {})",
							"(source, context) =>",
							" reason =>",
							" controller =>",
							" controller =>",
							"ReadableByteStreamController",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"ReadableStreamDefaultController",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"get locked()",
							"cancel(reason = undefined)",
							"getReader(rawOptions = undefined)",
							"(options, context) =>",
							"pipeThrough(rawTransform, rawOptions = {})",
							"(pair, context) =>",
							"pipeTo(destination, rawOptions = {})",
							"tee()",
							"values(rawOptions = undefined)",
							"(options, context) =>",
							"static from(asyncIterable)",
							" function pullAlgorithm()",
							" readResult =>",
							" function cancelAlgorithm(reason)",
							" function pullAlgorithm()",
							" iterResult =>",
							" function cancelAlgorithm(reason)",
							" iterResult =>",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"ReadableStream",
							"function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1)",
							"ReadableStream",
							"ReadableStreamDefaultController",
							"function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm)",
							"ReadableStream",
							"ReadableByteStreamController",
							"function InitializeReadableStream(stream)",
							"function IsReadableStream(x)",
							"function IsReadableStreamLocked(stream)",
							"function ReadableStreamCancel(stream, reason)",
							"readIntoRequest =>",
							"function ReadableStreamClose(stream)",
							"readRequest =>",
							"function ReadableStreamError(stream, e)",
							"function streamBrandCheckException2(name)",
							"function convertQueuingStrategyInit(init, context)",
							"byteLengthSizeFunction = chunk =>",
							"ByteLengthQueuingStrategy",
							"constructor(options)",
							"get highWaterMark()",
							"get size()",
							"ByteLengthQueuingStrategy",
							"function byteLengthBrandCheckException(name)",
							"function IsByteLengthQueuingStrategy(x)",
							"countSizeFunction = () =>",
							"CountQueuingStrategy",
							"constructor(options)",
							"get highWaterMark()",
							"get size()",
							"CountQueuingStrategy",
							"function countBrandCheckException(name)",
							"function IsCountQueuingStrategy(x)",
							"TransformStream",
							"constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {})",
							"(original, context) =>",
							" reason =>",
							" controller =>",
							" controller =>",
							" (chunk, controller) =>",
							"resolve =>",
							" function startAlgorithm()",
							" function writeAlgorithm(chunk)",
							" () =>",
							" function abortAlgorithm(reason)",
							"(resolve, reject) =>",
							" () =>",
							" r =>",
							" function closeAlgorithm()",
							"(resolve, reject) =>",
							" () =>",
							" r =>",
							" function pullAlgorithm()",
							" function cancelAlgorithm(reason)",
							"(resolve, reject) =>",
							" () =>",
							" r =>",
							"TransformStreamDefaultController",
							" chunk =>",
							" chunk =>",
							" () =>",
							" () =>",
							" reason =>",
							" () =>",
							"get readable()",
							"get writable()",
							"TransformStream",
							"function IsTransformStream(x)",
							"function TransformStreamError(stream, e)",
							"function TransformStreamErrorWritableAndUnblockWrite(stream, e)",
							"function TransformStreamUnblockWrite(stream)",
							"function TransformStreamSetBackpressure(stream, backpressure)",
							"resolve =>",
							"TransformStreamDefaultController",
							"constructor()",
							"get desiredSize()",
							"enqueue(chunk = undefined)",
							"error(reason = undefined)",
							"terminate()",
							"TransformStreamDefaultController",
							"TransformStreamDefaultController",
							"TransformStreamDefaultController",
							"TransformStreamDefaultController",
							"function IsTransformStreamDefaultController(x)",
							"function TransformStreamDefaultControllerClearAlgorithms(controller)",
							"function TransformStreamDefaultControllerEnqueue(controller, chunk)",
							"function TransformStreamDefaultControllerPerformTransform(controller, chunk)",
							" r =>",
							"function defaultControllerBrandCheckException3(name)",
							"function defaultControllerFinishPromiseResolve(controller)",
							"function defaultControllerFinishPromiseReject(controller, reason)",
							"function streamBrandCheckException3(name)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAsAwAAVENQU29ja2V0CkV2ZW50VGFyZ2V0UHJvcGVydGllcyhbJ2FjY2VwdCcsICdvcGVuJywgJ2Vycm9yJywgJ21lc3NhZ2UnLCAnY2xvc2UnXSkKICBjb25zdHJ1Y3RvciguLi5hcmdzKQpjdHggPT4KICBiaW5kKGFkZHJlc3MsIHBvcnQpCiAgbGlzdGVuKCkKICBjbG9zZShjb2RlKQogIHNlbmQoZGF0YSkKICBzdGF0aWMgbHdzKHMpCiAgY3JlYXRlKHMsIGNvbm5lY3RGbikKICBvblJhd0Fkb3B0OiB3c2kgPT4KICBvblJhd0Nvbm5lY3RlZDogd3NpID0+CiAgb25SYXdXcml0ZWFibGU6IHdzaSA9PgogIG9uUmF3Q2xvc2U6IHdzaSA9PgogIG9uUmF3Ung6ICh3c2ksIGRhdGEsIHNpemUpID0+CiAgY2FsbGJhY2sod3NpLCByZWFzb24sIC4uLmFyZ3MpCiAgc3RhdGljIHdhaXRXcml0ZShzKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogIGdldCByZW1vdGVBZGRyZXNzKCkKICBnZXQgcmVtb3RlUG9ydCgpCiAgZ2V0IGxvY2FsQWRkcmVzcygpCiAgZ2V0IGxvY2FsUG9ydCgpClRDUFNvY2tldApUQ1BTb2NrZXQKVENQU29ja2V0ClRDUFNvY2tldApUQ1BTb2NrZXRTdHJlYW0KICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pCigpID0+CihyZXNvbHZlLCByZWplY3QpID0+CigpID0+CiAgc3RhcnQ6IGNvbnRyb2xsZXIgPT4KZXZlbnQgPT4KKCkgPT4KICBjYW5jZWw6ICgpID0+CiAgc3RhcnQ6IGNvbnRyb2xsZXIgPT4KKCkgPT4KICB3cml0ZTogY2h1bmsgPT4KICBjbG9zZTogKCkgPT4KICBhYm9ydDogKCkgPT4KZXJyID0+CiAgcmVzb2x2ZSA9PgpldmVudCA9PgogIHN0YXRpYyBzb2NrZXQoc3MpCiAgY2xvc2UoKQpUQ1BTb2NrZXRTdHJlYW0AAAAAAAAAAJ89AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					62,
					1,
					"outline_refresh",
					{
						"path": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/tcpSocket.js",
						"symkeys":
						[
							[
								461,
								470
							],
							[
								479,
								549
							],
							[
								575,
								595
							],
							[
								1003,
								1009
							],
							[
								1100,
								1119
							],
							[
								1225,
								1233
							],
							[
								1422,
								1433
							],
							[
								1477,
								1487
							],
							[
								1562,
								1575
							],
							[
								1612,
								1632
							],
							[
								1865,
								1883
							],
							[
								2116,
								2138
							],
							[
								2185,
								2207
							],
							[
								2222,
								2240
							],
							[
								2290,
								2319
							],
							[
								2373,
								2403
							],
							[
								2632,
								2651
							],
							[
								2677,
								2697
							],
							[
								2755,
								2774
							],
							[
								2832,
								2848
							],
							[
								2906,
								2924
							],
							[
								2983,
								2998
							],
							[
								3070,
								3079
							],
							[
								3101,
								3110
							],
							[
								3164,
								3173
							],
							[
								3244,
								3253
							],
							[
								3419,
								3434
							],
							[
								3449,
								3474
							],
							[
								3566,
								3571
							],
							[
								3983,
								4003
							],
							[
								4050,
								4055
							],
							[
								4329,
								4349
							],
							[
								4407,
								4415
							],
							[
								4502,
								4507
							],
							[
								4654,
								4667
							],
							[
								4761,
								4781
							],
							[
								4819,
								4824
							],
							[
								4860,
								4881
							],
							[
								5013,
								5025
							],
							[
								5060,
								5072
							],
							[
								5179,
								5185
							],
							[
								5414,
								5424
							],
							[
								5462,
								5470
							],
							[
								5499,
								5516
							],
							[
								5597,
								5604
							],
							[
								5638,
								5653
							]
						],
						"symlist":
						[
							"TCPSocket",
							"EventTargetProperties(['accept', 'open', 'error', 'message', 'close'])",
							"constructor(...args)",
							" ctx =>",
							"bind(address, port)",
							"listen()",
							"close(code)",
							"send(data)",
							"static lws(s)",
							"create(s, connectFn)",
							"onRawAdopt: wsi =>",
							"onRawConnected: wsi =>",
							"onRawWriteable: wsi =>",
							"onRawClose: wsi =>",
							"onRawRx: (wsi, data, size) =>",
							"callback(wsi, reason, ...args)",
							"static waitWrite(s)",
							"(resolve, reject) =>",
							"get remoteAddress()",
							"get remotePort()",
							"get localAddress()",
							"get localPort()",
							"TCPSocket",
							"TCPSocket",
							"TCPSocket",
							"TCPSocket",
							"TCPSocketStream",
							"constructor(options = {})",
							" () =>",
							"(resolve, reject) =>",
							" () =>",
							"start: controller =>",
							" event =>",
							" () =>",
							"cancel: () =>",
							"start: controller =>",
							" () =>",
							"write: async chunk =>",
							"close: () =>",
							"abort: () =>",
							" err =>",
							"resolve =>",
							" event =>",
							"static socket(ss)",
							"close()",
							"TCPSocketStream"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/streams.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAsAwAAVENQU29ja2V0CkV2ZW50VGFyZ2V0UHJvcGVydGllcyhbJ2FjY2VwdCcsICdvcGVuJywgJ2Vycm9yJywgJ21lc3NhZ2UnLCAnY2xvc2UnXSkKICBjb25zdHJ1Y3RvciguLi5hcmdzKQpjdHggPT4KICBiaW5kKGFkZHJlc3MsIHBvcnQpCiAgbGlzdGVuKCkKICBjbG9zZShjb2RlKQogIHNlbmQoZGF0YSkKICBzdGF0aWMgbHdzKHMpCiAgY3JlYXRlKHMsIGNvbm5lY3RGbikKICBvblJhd0Fkb3B0OiB3c2kgPT4KICBvblJhd0Nvbm5lY3RlZDogd3NpID0+CiAgb25SYXdXcml0ZWFibGU6IHdzaSA9PgogIG9uUmF3Q2xvc2U6IHdzaSA9PgogIG9uUmF3Ung6ICh3c2ksIGRhdGEsIHNpemUpID0+CiAgY2FsbGJhY2sod3NpLCByZWFzb24sIC4uLmFyZ3MpCiAgc3RhdGljIHdhaXRXcml0ZShzKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogIGdldCByZW1vdGVBZGRyZXNzKCkKICBnZXQgcmVtb3RlUG9ydCgpCiAgZ2V0IGxvY2FsQWRkcmVzcygpCiAgZ2V0IGxvY2FsUG9ydCgpClRDUFNvY2tldApUQ1BTb2NrZXQKVENQU29ja2V0ClRDUFNvY2tldApUQ1BTb2NrZXRTdHJlYW0KICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pCigpID0+CihyZXNvbHZlLCByZWplY3QpID0+CigpID0+CiAgc3RhcnQ6IGNvbnRyb2xsZXIgPT4KZXZlbnQgPT4KKCkgPT4KICBjYW5jZWw6ICgpID0+CiAgc3RhcnQ6IGNvbnRyb2xsZXIgPT4KKCkgPT4KICB3cml0ZTogY2h1bmsgPT4KICBjbG9zZTogKCkgPT4KICBhYm9ydDogKCkgPT4KZXJyID0+CiAgcmVzb2x2ZSA9PgpldmVudCA9PgogIHN0YXRpYyBzb2NrZXQoc3MpCiAgY2xvc2UoKQpUQ1BTb2NrZXRTdHJlYW0AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/tcpSocket.js",
			"redo_stack":
			[
				[
					88,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAIsKAAAAAAAAiwoAAAAAAAAGAAAAICAgICAgiwoAAAAAAACPCgAAAAAAAAAAAACKCgAAAAAAAIoKAAAAAAAABQAAAAogICAgigoAAAAAAACaCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEKAAAAAAAAkQoAAAAAAAAAAAAAAADwvw"
				]
			],
			"settings":
			{
				"buffer_size": 5705,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAADEVAAAAAAAAMRUAAAAAAAABAAAAew",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIVAAAAAAAAMhUAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAAHoVAAAAAAAAehUAAAAAAAABAAAAfQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsVAAAAAAAAexUAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"right_delete",
					null,
					"AQAAAHMVAAAAAAAAcxUAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMVAAAAAAAAcxUAAAAAAAD////////vfw"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAHIVAAAAAAAAchUAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMVAAAAAAAAcxUAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAABYFgAAaW1wb3J0IHsgRXZlbnRUYXJnZXQsIEV2ZW50VGFyZ2V0UHJvcGVydGllcyB9IGZyb20gJy4vbHdzL2V2ZW50cy5qcyc7CmltcG9ydCB7IGRlZmluZSwgbWFwcGVyLCBhY3Rvciwgc3RhdGVzLCB2ZXJib3NlIH0gZnJvbSAnLi9sd3MvdXRpbC5qcyc7CmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJy4vbHdzL2NvbnRleHQuanMnOwpleHBvcnQgeyBDT05ORUNUSU5HLCBPUEVOLCBDTE9TSU5HLCBDTE9TRUQgfSBmcm9tICcuL2x3cy91dGlsLmpzJzsKaW1wb3J0IHsgTFdTX1NFUlZFUl9PUFRJT05fT05MWV9SQVcsIExXU19TRVJWRVJfT1BUSU9OX0ZBTExCQUNLX1RPX0FQUExZX0xJU1RFTl9BQ0NFUFRfQ09ORklHLCBnZXRDYWxsYmFja05hbWUgfSBmcm9tICdsd3MnOwppbXBvcnQgeyBSZWFkYWJsZVN0cmVhbSwgV3JpdGFibGVTdHJlYW0gfSBmcm9tICcuL2x3cy9zdHJlYW1zLmpzJzsKCmV4cG9ydCBjbGFzcyBUQ1BTb2NrZXQgZXh0ZW5kcyBFdmVudFRhcmdldFByb3BlcnRpZXMoWydhY2NlcHQnLCAnb3BlbicsICdlcnJvcicsICdtZXNzYWdlJywgJ2Nsb3NlJ10pIHsKICAjd3NpOwogICNvcHRpb25zOwoKICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7CiAgICBzdXBlcigpOwoKICAgIGxldCBvcHRpb25zOwoKICAgIGlmKGFyZ3MubGVuZ3RoID49IDIpIHsKICAgICAgb3B0aW9ucyA9IGFyZ3NbMl0gPz8ge307CiAgICAgIG9wdGlvbnMuaG9zdCA9IGFyZ3NbMF07CiAgICAgIG9wdGlvbnMucG9ydCA9IGFyZ3NbMV07CiAgICB9IGVsc2UgewogICAgICBbb3B0aW9uc10gPSBhcmdzOwogICAgfQoKICAgIGNvbnN0IHsgaG9zdCwgYWRkcmVzcywgcG9ydCwgLi4ucmVzdCB9ID0gb3B0aW9uczsKCiAgICB0aGlzLiNvcHRpb25zID0gcmVzdDsKCiAgICBpZigoaG9zdCB8fCBhZGRyZXNzKSAmJiBwb3J0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgdGhpcy5yZWFkeVN0YXRlID0gQ09OTkVDVElORzsKCiAgICAgIHRoaXMuI3dzaSA9IFRDUFNvY2tldC4jY3JlYXRlKHRoaXMsIGN0eCA9PiBjdHguY2xpZW50Q29ubmVjdCh7IGhvc3QsIGFkZHJlc3MsIHBvcnQsIG1ldGhvZDogJ1JBVycsIHByb3RvY29sOiAncmF3JyB9KSk7CiAgICB9CiAgfQoKICBiaW5kKGFkZHJlc3MsIHBvcnQpIHsKICAgIHRoaXMuI29wdGlvbnMgPz89IHt9OwogICAgT2JqZWN0LmFzc2lnbih0aGlzLiNvcHRpb25zLCB7IGFkZHJlc3MsIHBvcnQgfSk7CiAgICByZXR1cm4gdGhpczsKICB9CgogIGxpc3RlbigpIHsKICAgIHRoaXMuI29wdGlvbnMub3B0aW9ucyA/Pz0gMDsKICAgIHRoaXMuI29wdGlvbnMub3B0aW9ucyB8PSBMV1NfU0VSVkVSX09QVElPTl9PTkxZX1JBVyB8IExXU19TRVJWRVJfT1BUSU9OX0ZBTExCQUNLX1RPX0FQUExZX0xJU1RFTl9BQ0NFUFRfQ09ORklHOwoKICAgIFRDUFNvY2tldC4jY3JlYXRlKHRoaXMpOwogIH0KCiAgY2xvc2UoY29kZSkgewogICAgcmV0dXJuIHRoaXMuI3dzaS5jbG9zZShjb2RlKTsKICB9CgogIHNlbmQoZGF0YSkgewogICAgcmV0dXJuIHRoaXMuI3dzaS53cml0ZShkYXRhKTsKICB9CgogIHN0YXRpYyAjY3R4OwogIHN0YXRpYyAjYWN0OwoKICBzdGF0aWMgbHdzKHMpIHsKICAgIHJldHVybiBzLiN3c2k7CiAgfQoKICBzdGF0aWMgI2NyZWF0ZShzLCBjb25uZWN0Rm4pIHsKICAgIGNvbnN0IGFjdCA9ICh0aGlzLiNhY3QgPz89IG1hcHBlcigpKTsKCiAgICB0aGlzLiNjdHggPz89IGNyZWF0ZUNvbnRleHQoewogICAgICAuLi5zLiNvcHRpb25zLAogICAgICBsaXN0ZW5BY2NlcHRSb2xlOiAncmF3LXNrdCcsCiAgICAgIGxpc3RlbkFjY2VwdFByb3RvY29sOiAncmF3JywKICAgICAgcHJvdG9jb2xzOiBbCiAgICAgICAgewogICAgICAgICAgbmFtZTogJ3JhdycsCiAgICAgICAgICBvblJhd0Fkb3B0OiB3c2kgPT4gewogICAgICAgICAgICBjb25zdCBzb2NrZXQgPSBuZXcgVENQU29ja2V0KCk7CiAgICAgICAgICAgIHNvY2tldC4jd3NpID0gd3NpOwogICAgICAgICAgICBzb2NrZXQucmVhZHlTdGF0ZSA9IE9QRU47CiAgICAgICAgICAgIGFjdCh3c2ksIGFjdG9yKHNvY2tldCkpOwogICAgICAgICAgICBzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiAnYWNjZXB0Jywgc29ja2V0IH0pOwogICAgICAgICAgfSwKICAgICAgICAgIG9uUmF3Q29ubmVjdGVkOiB3c2kgPT4gYWN0KHdzaSkuc3RhdGUoT1BFTikuZXZlbnQoJ29wZW4nKSwKICAgICAgICAgIG9uUmF3V3JpdGVhYmxlOiB3c2kgPT4ge30sCiAgICAgICAgICBvblJhd0Nsb3NlOiB3c2kgPT4gYWN0KHdzaSkuc3RhdGUoQ0xPU0VEKS5ldmVudCgnY2xvc2UnKSwKICAgICAgICAgIG9uUmF3Ung6ICh3c2ksIGRhdGEsIHNpemUpID0+IGFjdCh3c2kpLmV2ZW50KCdtZXNzYWdlJywgeyBkYXRhLCBzaXplIH0pLAogICAgICAgICAgY2FsbGJhY2sod3NpLCByZWFzb24sIC4uLmFyZ3MpIHsKICAgICAgICAgICAgdmVyYm9zZShnZXRDYWxsYmFja05hbWUocmVhc29uKSwgd3NpLCBhcmdzKTsKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgXSwKICAgIH0pOwoKICAgIGlmKGNvbm5lY3RGbikgewogICAgICBjb25zdCB3c2kgPSBjb25uZWN0Rm4odGhpcy4jY3R4KTsKCiAgICAgIGFjdCh3c2ksIGFjdG9yKHMsIHZlcmJvc2UpKTsKICAgICAgcmV0dXJuIHdzaTsKICAgIH0KICB9CgogIHN0YXRpYyB3YWl0V3JpdGUocykgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHMuI3dzaS53YW50V3JpdGUocmVzb2x2ZSkpOwogIH0KCiAgLyogcHJldHRpZXItaWdub3JlICovIGdldCByZW1vdGVBZGRyZXNzKCkgeyByZXR1cm4gdGhpcy4jd3NpLnBlZXI/Lmhvc3Q7IH0KICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IHJlbW90ZVBvcnQoKSB7IHJldHVybiB0aGlzLiN3c2kucGVlcj8ucG9ydDsgfQogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBnZXQgbG9jYWxBZGRyZXNzKCkgeyByZXR1cm4gdGhpcy4jd3NpLmxvY2FsPy5ob3N0OyB9CiAgLyogcHJldHRpZXItaWdub3JlICovIGdldCBsb2NhbFBvcnQoKSB7IHJldHVybiB0aGlzLiN3c2kubG9jYWw/LnBvcnQ7IH0KfQoKZGVmaW5lKFRDUFNvY2tldCwgc3RhdGVzKTsKZGVmaW5lKFRDUFNvY2tldC5wcm90b3R5cGUsIHN0YXRlcyk7CgpUQ1BTb2NrZXQucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnVENQU29ja2V0JzsKCmRlZmluZShUQ1BTb2NrZXQucHJvdG90eXBlLCB7IGJpbmFyeVR5cGU6ICdhcnJheWJ1ZmZlcicgfSwgeyB3cml0YWJsZTogdHJ1ZSB9KTsKZGVmaW5lKFRDUFNvY2tldC5wcm90b3R5cGUsIHsgcmVhZHlTdGF0ZTogdW5kZWZpbmVkIH0sIHsgd3JpdGFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUgfSk7CgovKioKICogQW4gaW50ZXJmYWNlIGZvciBoYW5kbGluZyBUQ1BTb2NrZXQgY29ubmVjdGlvbnMgdXNpbmcgc3RyZWFtcy4KICovCmV4cG9ydCBjbGFzcyBUQ1BTb2NrZXRTdHJlYW0gewogICNzb2NrOwoKICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHsKICAgIGNvbnN0IHsgc2lnbmFsLCBjdG9yID0gVENQU29ja2V0IH0gPSBvcHRpb25zOwoKICAgIHNpZ25hbD8uYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB0aGlzLmNsb3NlKCksIHsKICAgICAgb25jZTogdHJ1ZSwKICAgIH0pOwoKICAgIHRoaXMuI3NvY2sgPSBuZXcgY3RvcihvcHRpb25zKTsKICAgIHRoaXMuI3NvY2suYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7CgogICAgZGVmaW5lKHRoaXMsIHsKICAgICAgLyoqCiAgICAgICAqIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIFRDUFNvY2tldCBjb25uZWN0aW9uIGlzIG9wZW5lZC4gQW1vbmcgb3RoZXIgZmVhdHVyZXMsIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGEKICAgICAgICogUmVhZGFibGVTdHJlYW0gYW5kIGEgV3JpdGFibGVTdHJlYW0gaW5zdGFuY2UgZm9yIHJlY2VpdmluZyBhbmQgc2VuZGluZyBkYXRhIG9uIHRoZSBjb25uZWN0aW9uLgogICAgICAgKi8KICAgICAgb3BlbmVkOiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgdGhpcy4jc29jay5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4KICAgICAgICAgIHJlc29sdmUoewogICAgICAgICAgICByZW1vdGVBZGRyZXNzOiB0aGlzLiNzb2NrLnJlbW90ZUFkZHJlc3MsCiAgICAgICAgICAgIHJlbW90ZVBvcnQ6IHRoaXMuI3NvY2sucmVtb3RlUG9ydCwKICAgICAgICAgICAgbG9jYWxBZGRyZXNzOiB0aGlzLiNzb2NrLmxvY2FsQWRkcmVzcywKICAgICAgICAgICAgbG9jYWxQb3J0OiB0aGlzLiNzb2NrLmxvY2FsUG9ydCwKICAgICAgICAgICAgcmVhZGFibGU6IG5ldyBSZWFkYWJsZVN0cmVhbSh7CiAgICAgICAgICAgICAgc3RhcnQ6IGNvbnRyb2xsZXIgPT4gewogICAgICAgICAgICAgICAgdGhpcy4jc29jay5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZXZlbnQgPT4gY29udHJvbGxlci5lbnF1ZXVlKGV2ZW50LmRhdGEpKTsKICAgICAgICAgICAgICAgIHRoaXMuI3NvY2suYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpOwogICAgICAgICAgICAgICAgICB9IGNhdGNoIHt9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGNhbmNlbDogKCkgPT4gdGhpcy4jc29jay5jbG9zZSgpLAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgd3JpdGFibGU6IG5ldyBXcml0YWJsZVN0cmVhbSh7CiAgICAgICAgICAgICAgc3RhcnQ6IGNvbnRyb2xsZXIgPT4gdGhpcy4jc29jay5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IGNvbnRyb2xsZXIuZXJyb3IoKSksCiAgICAgICAgICAgICAgd3JpdGU6IGFzeW5jIGNodW5rID0+IHsKICAgICAgICAgICAgICAgIGF3YWl0IGN0b3Iud2FpdFdyaXRlKHRoaXMuI3NvY2spOwoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNzb2NrLnNlbmQoY2h1bmspOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgY2xvc2U6ICgpID0+IHRoaXMuI3NvY2suY2xvc2UoKSwKICAgICAgICAgICAgICBhYm9ydDogKCkgPT4gdGhpcy4jc29jay5jbG9zZSgpLAogICAgICAgICAgICB9KSwKICAgICAgICAgIH0pLAogICAgICAgICk7CiAgICAgICAgdGhpcy4jc29jay5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVyciA9PiByZWplY3QobmV3IEVycm9yKCdUQ1BTb2NrZXRTdHJlYW0gZXJyb3I6ICcgKyBlcnIubWVzc2FnZSkpKTsKICAgICAgfSksCiAgICAgIC8qKgogICAgICAgKiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBUQ1BTb2NrZXQgY29ubmVjdGlvbiBpcyBjbG9zZWQsIHByb3ZpZGluZyB0aGUgY2xvc2UgY29kZSBhbmQgcmVhc29uLgogICAgICAgKi8KICAgICAgY2xvc2VkOiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IAogICAgICAgIHRoaXMuI3NvY2suYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCBldmVudCA9PiByZXNvbHZlKCkpICAgICAgKSwKICAgIH0pOwogIH0KCiAgc3RhdGljIHNvY2tldChzcykgewogICAgcmV0dXJuIHNzLiNzb2NrOwogIH0KCiAgLyoqCiAgICogQ2xvc2VzIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbi4KICAgKi8KICBjbG9zZSgpIHsKICAgIHRoaXMuI3NvY2suY2xvc2UoKTsKICB9Cn0KClRDUFNvY2tldFN0cmVhbS5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdUQ1BTb2NrZXRTdHJlYW0nOwoAAAAAAAAAAEkWAAAAAAAAAAAAAAAAAAAAAAAASRYAAAAAAAAAAAAAAAAAAAAAAABJFgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIVAAAAAAAAchUAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/lws/streams.js",
			"settings":
			{
				"buffer_size": 157508,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"cam",
				"Convert Case: camelCase"
			],
			[
				"camel",
				"Convert Case: camelCase"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"came",
				"Convert Case: camelCase"
			],
			[
				"case ",
				"Convert Case: camelCase"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws"
	],
	"file_history":
	[
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/streams.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lws-socket.c",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/tcpSocket.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lws-context.h",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core/context.c",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/tests/test_websocket.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/request.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/response.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/stream-utils.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/body.js",
		"/mnt/data/Projects/plot-cv/quickjs/quickjs.h",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/js-utils.h",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/iohandler.h",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/tests/test-server.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/tests/test-client.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/tests/test-websocket.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/context.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/util.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/README.md",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/fetch.js",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lws.c",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/mnt/data/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/webakeit/webakeit-telegram.js",
		"/home/roman/Projects/webakeit/webakeit.tmp",
		"/home/roman/Projects/webakeit/webakeit.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/client/client-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-write.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/fetch.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/output.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/plat/optee/network.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/plat/freertos/freertos-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/state.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/plat/unix/unix-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/h2/http2.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-sockaddr46.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/body.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/headers.js",
		"/home/roman/.config/sublime-text/Packages/User/Themes/C Theme.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-sockaddr46.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-multi/minimal-http-client-multi.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-post/minimal-http-client-post.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/parsers.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/h2/ops-h2.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core/private-lib-core.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/secure-streams/protocols/ss-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/tcpSocket.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/serve.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/websocket.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/src/lib/helpers/webidl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/src/lib/helpers/webidl.ts",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/assert.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/websocketstream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/src/lib/readable-stream/pipe.ts",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/context.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/request.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/response.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/body.old.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/abort.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/readable-stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-eventlib-exports.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/header.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-proxy/minimal-raw-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-protocols-plugins.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/h2/hpack.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-vhost.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-spa.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-deaddrop/minimal-http-server-deaddrop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/deaddrop/protocol_lws_deaddrop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/network.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-x509.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-writeable.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-adopt.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/private-lib-core-net.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-async-dns.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-struct.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/private-lib-roles-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/private-lib-roles.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-client/main.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/src/lib/readable-stream.ts",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/src/lib/validators/underlying-sink.ts",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/src/ponyfill.ts",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/web-streams-polyfill/src/lib/transform-stream/transformer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-tokenize.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/simple-queue.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/list.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/mimetypes.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/abort-controller.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/abort-signal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/event-target-shim.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/lws/event-attribute-handler.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/fetch/body.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/assert.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/list.js",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/fetch/request.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lib/fetch/response.js"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/*,./libwebsockets/include,*.h",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsocketsx/*,./libwebsockets/include,*.h",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/*,./libwebsockets/include,*.h",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/*,libwebsockets/include,*.h",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/*,libwebsockets/include",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/include/*,-*/libwebsockets/*",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/include/*,-*/libwebsockets/[^i]*",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/include/*,-*/libwebsockets/[!i]*",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/include/*,-*/libwebsockets/[^i]*",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/includex/*,-*/libwebsockets/[^i]*",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/includex/*,-*/libwebsockets/*",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h,-*/libwebsockets/*",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.c,*.h",
			"/mnt/data/Projects/plot-cv/quickjs/qjs-lws,*.[hc]",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"ReadableStreamPipeTo",
			"\\._",
			"ReadableStreamReaderGenericRelease",
			"\\._",
			"\\b_state\\b",
			"_CALLBACK\\w*WRIT",
			"METHOD_WRITE:",
			"\"send\"",
			"context_free",
			"lws_context_destroy",
			"lws_context_destroylws_context_destroy",
			"lws_context_destroy",
			"DESTROY:",
			"normalizeMethod",
			"));\n",
			"\\bC\\b",
			"interactive",
			"'info'",
			"verbose\\(",
			"verbose",
			"JS_Eval\\(",
			"glob",
			"iohandler_function",
			"JS_Eval\\(",
			"JS_EVAL_",
			"JS_Eval",
			"\"set",
			"rest",
			"req.url,",
			"PLUGIN_PROTOCOL_",
			"\"id\"",
			"waitWrite",
			"wantWrite",
			"clientSslCa",
			"\\blogLevel\\b",
			"logLevel",
			"\"logLevel",
			"lwsjs_loglevel",
			"log_callback",
			"setLog",
			"iteratorProperty",
			"readableStreamCallback"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"log("
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/Outline/outline-Dark.hidden-tmTheme",
							"current_file": "/mnt/data/Projects/plot-cv/quickjs/qjs-lws/lib/lws/streams.js",
							"function_name_status_row": 2,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1761336501.27,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/tcpSocket.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5705,
						"regions":
						{
						},
						"selection":
						[
							[
								2698,
								2714
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 100,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1761414335.16,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1315.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/lws/streams.js",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 157508,
						"regions":
						{
						},
						"selection":
						[
							[
								96601,
								96621
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2397,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1761419127.03,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 40684.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "",
	"project": "qjs-lws.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lws-con",
				"lws-context.c"
			],
			[
				"context.c",
				"libwebsockets/lib/core/context.c"
			],
			[
				"lws-conte",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"ioha",
				"iohandler.h"
			],
			[
				"ioh",
				"iohandler.h"
			],
			[
				"util",
				"lib/lws/util.js"
			],
			[
				"fetch",
				"lib/fetch.js"
			],
			[
				"body",
				"lib/lws/body.js"
			],
			[
				"minnet-client.c",
				"src/minnet-client.c"
			],
			[
				"weba",
				"webakeit-telegram.js"
			],
			[
				"lws-write",
				"libwebsockets/include/libwebsockets/lws-write.h"
			],
			[
				"lws.c",
				"lws.c"
			],
			[
				"lws-soc",
				"lws-socket.c"
			],
			[
				"header",
				"lib/lws/headers.js"
			],
			[
				"lws-net",
				"libwebsockets/include/libwebsockets/lws-network-helper.h"
			],
			[
				"http2",
				"libwebsockets/lib/roles/h2/http2.c"
			],
			[
				"lws-s",
				"lws-socket.c"
			],
			[
				"lws-c",
				"lws-context.c"
			],
			[
				"lws-so",
				"lws-socket.c"
			],
			[
				"http2.c",
				"libwebsockets/lib/roles/h2/http2.c"
			],
			[
				"webidl",
				"web-streams-polyfill/src/lib/helpers/webidl.js"
			],
			[
				"webidl.ts",
				"web-streams-polyfill/src/lib/helpers/webidl.ts"
			],
			[
				"pipe.ts",
				"web-streams-polyfill/src/lib/readable-stream/pipe.ts"
			],
			[
				"streams",
				"lib/lws/streams.js"
			],
			[
				"context",
				"lib/lws/context.js"
			],
			[
				"js-u",
				"js-utils.c"
			],
			[
				"util.js",
				"lib/lws/util.js"
			],
			[
				"heade",
				"lib/lws/headers.js"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"body.js",
				"lib/lws/body.js"
			],
			[
				"abort",
				"lib/lws/abort.js"
			],
			[
				"hpack.c",
				"libwebsockets/lib/roles/h2/hpack.c"
			],
			[
				"lws-ca",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"dead",
				"libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-deaddrop/minimal-http-server-deaddrop.c"
			],
			[
				"deaddrop",
				"libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-deaddrop/minimal-http-server-deaddrop.c"
			],
			[
				"lws-vhos",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"lws-vho",
				"lws-vhost.h"
			],
			[
				"lws-asy",
				"libwebsockets/include/libwebsockets/lws-async-dns.h"
			],
			[
				"network",
				"libwebsockets/lib/core-net/network.c"
			],
			[
				"lws-netwo",
				"libwebsockets/include/libwebsockets/lws-network-helper.h"
			],
			[
				"lws-str",
				"libwebsockets/include/libwebsockets/lws-struct.h"
			],
			[
				"lws-",
				"libwebsockets/include/libwebsockets/lws-misc.h"
			],
			[
				"lws-ad",
				"libwebsockets/include/libwebsockets/lws-adopt.h"
			],
			[
				"tcpso",
				"lib/tcpSocket.js"
			],
			[
				"client.h",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"ts/lws-",
				"libwebsockets/include/libwebsockets/lws-misc.h"
			],
			[
				"context.js",
				"lib/lws/context.js"
			],
			[
				"lws-cn",
				"lws-context.c"
			],
			[
				"serve",
				"lib/serve.js"
			],
			[
				"abort-si",
				"lib/lws/abort-signal.js"
			],
			[
				"abort-sig",
				"lib/lws/abort-signal.js"
			],
			[
				"fetch.js",
				"lib/fetch.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"lws.h",
				"lws.h"
			],
			[
				"js-ut",
				"js-utils.h"
			],
			[
				"js-utils.h",
				"js-utils.h"
			],
			[
				"121",
				"libwebsockets/minimal-examples/embedded/lhp/esp32-waveshare-104-212/main/splash-212-104.jpg.h"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"serve.js",
				"lib/serve.js"
			],
			[
				"response",
				"lib/fetch/response.js"
			],
			[
				"request",
				"lib/fetch/request.js"
			],
			[
				"lws-sock",
				"lws-socket.c"
			],
			[
				"websocket.js",
				"lib/websocket.js"
			],
			[
				"lws-clie",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"dummy",
				"libwebsockets/lib/core-net/dummy-callback.c"
			],
			[
				"test-clie",
				"test-client.js"
			],
			[
				"lws-co",
				"lws-context.c"
			],
			[
				"dummy-ca",
				"libwebsockets/lib/core-net/dummy-callback.c"
			],
			[
				"lws-client",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"conte",
				"lws-context.c"
			],
			[
				"simple-que",
				"lib/simple-queue.js"
			],
			[
				"lws-cont",
				"lws-context.c"
			],
			[
				"client-ht",
				"libwebsockets/lib/roles/http/client/client-http.c"
			],
			[
				"lws-h",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"post.c",
				"libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-post/minimal-http-client-post.c"
			],
			[
				"fet",
				"lib/fetch.js"
			],
			[
				"headers",
				"lib/fetch/headers.js"
			],
			[
				"private",
				"libwebsockets/lib/roles/private-lib-roles.h"
			],
			[
				"ops-ws",
				"libwebsockets/lib/roles/ws/ops-ws.c"
			],
			[
				"websock",
				"lib/websocket.js"
			],
			[
				"service",
				"libwebsockets/lib/core-net/service.c"
			],
			[
				"wsi.c",
				"libwebsockets/lib/core-net/wsi.c"
			],
			[
				"websocket",
				"lib/websocket.js"
			],
			[
				"socket.js",
				"lib/websocket.js"
			],
			[
				"webspo",
				"web-streams-polyfill/.idea/web-streams-polyfill.iml"
			],
			[
				"webso",
				"lib/websocket.js"
			],
			[
				"minnet-client",
				"libwebsockets/minimal-examples-lowlevel/mqtt-client/minimal-mqtt-client/minimal-mqtt-client.c"
			],
			[
				"private-lib-core",
				"libwebsockets/lib/core/private-lib-core.h"
			],
			[
				"private-lib-",
				"libwebsockets/lib/roles/private-lib-roles.h"
			],
			[
				"lws-socket.h",
				"lws-socket.h"
			],
			[
				"mirror",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"otocol_lws_raw_proxy.c",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				"test-cli",
				"test-client.js"
			],
			[
				"lws-misc",
				"libwebsockets/include/libwebsockets/lws-misc.h"
			],
			[
				"lws-html",
				"libwebsockets/include/libwebsockets/lws-html.h"
			],
			[
				"lws-spa",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"lws-sp",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"quickj",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"lws-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"spa.c",
				"lws-spa.c"
			],
			[
				"wsi-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"vhost",
				"libwebsockets/lib/core-net/vhost.c"
			],
			[
				"tls-clie",
				"libwebsockets/lib/tls/tls-client.c"
			],
			[
				"context.",
				"libwebsockets/lib/core/context.c"
			],
			[
				"raw-fall",
				"libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c"
			],
			[
				"test-cl",
				"test-client.js"
			],
			[
				"socket.h",
				"lws-socket.h"
			],
			[
				"lws-log",
				"libwebsockets/include/libwebsockets/lws-logs.h"
			],
			[
				"spa.h",
				"libwebsockets/include/libwebsockets/lws-spa.h"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"",
				"include/utils.h"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 175.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
